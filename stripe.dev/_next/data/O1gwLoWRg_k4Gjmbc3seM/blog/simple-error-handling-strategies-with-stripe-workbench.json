{"pageProps":{"postData":{"slug":"simple-error-handling-strategies-with-stripe-workbench","title":"Simple error handling strategies with Stripe Workbench","summary":"With Workbench, developers now have a bird’s-eye view of their integration which shows many potential issues in one place. This makes it easier to see the impact of each incident, see how often it’s happening, and receive actionable advice for resolving the issue.","authors":["Ben Smith"],"date":"2024-09-02","type":"Blog","topics":["Workbench","Error Handling"],"artConfig":{"ampX":0.24321052757950756,"ampY":0.21234603378855432,"aspectRatio":2.4639999999999973,"axis":"x","lump":1.7489999999999981,"count":116.19999999999999,"freq":0.8651107682703485,"isDial":false,"isLineart":false,"isRing":false,"isSpiral":false,"isBalls":false,"isMatrix":false,"left":0,"kaleids":8,"mouseX":0.9,"mouseY":0.8729838709677419,"noise":0,"scale":0.2736845318092905,"top":-58,"twirl":0.2,"twist":8.16200000000005,"velocity":2,"shape":"ellipse"},"content":"\nWe’ve heard from the Stripe community that it is too hard to find data about errors which resulted from your Stripe API invocations. We have also heard that it would be helpful to provide more context and actionable advice once you do find the error. Now with the launch of the [Stripe Workbench](https://docs.stripe.com/workbench), developers have a birds-eye view of their integration which shows many potential issues in one place. This makes it easier to see the impact of each incident, see how often it’s happening, and receive actionable advice for resolving the issue.\n\n### What is a Stripe error\n\nStripe’s error handling system covers a wide array of potential issues which can arise during payment processing and API interactions. These include payment-specific errors like [declined transactions](https://docs.stripe.com/declines) and fraud prevention blocks, to technical hiccups such as network failures and authentication problems. Each of these errors is categorized into distinct groups called “error types.”\n\nThese types include [StripeCardError](https://docs.stripe.com/error-handling?lang=node\\#payment-errors) for payment-related issues, [StripeInvalidRequestError](https://docs.stripe.com/error-handling?lang=node\\#invalid-request-errors) for incorrect API usage, [StripeConnectionError](https://docs.stripe.com/error-handling?lang=node\\#connection-errors) for network problems, and [several others](https://docs.stripe.com/api/errors) for authentication, permissions, rate limits, and webhook verification. \n\nEach error type is tailored to provide specific insights into what went wrong, allowing developers to implement targeted solutions and create robust, fault-tolerant integrations. You can utilize Workbench to maintain a good understanding of these diverse error types and how to properly handle them. This will help you to build smoother, higher conversion payment experiences.\n\n### Getting started with Workbench\n\nTo see Workbench:\n\n1. Navigate to [https://dashboard.stripe.com/](https://dashboard.stripe.com/) in your preferred browser and log into your Stripe account.   \n2. If you have multiple accounts configured, use the drop-down in the top-left to select the store API activity you wish to view. Workbench reports and content are scoped to the store level.  \n3. In the bottom-right corner of the browser, hover over the terminal icon to expand the menu, then select the caret symbol **^** to open Workbench.\n\n\n4. Workbench opens in the lower portion of the window:\n\n\n*Workbench is not a browser extension and does not rely on CLIs or other tools in your development machine, so you can use it immediately without the need for installing additional software.*\n\n### Finding errors with Stripe Workbench\n\nWorkbench features an **Errors** tab which provides a comprehensive overview of recent issues encountered in your Stripe account. This tab not only summarizes these errors but also offers guidance on resolving each specific type of API error. Additionally, it allows you to examine recent API request logs associated with each error, giving you valuable context for troubleshooting and improving your integration.\n\nTo view recent errors, choose the **Errors** tab. This view consists of three components, from left to right:\n\n* A filterable list of recent errors within a given period (1 hour, 1 day, 7 days).  \n* A summary of the selected error.  \n* Logs associated with the error.\n\n![](/images/error-handling-workbench/error-handling-workbench3b.png)\n\n\nErrors which have occurred multiple times are grouped together and counted to help you identify those which are occurring most often. \n\nIn the following example, you see that the `payment_intent_unexpected_state` error has occurred 7 times during the past 7 days:  \n\n![](/images/error-handling-workbench/error-handling-workbench4.png)\n\nChoosing this error, opens the **Summary** and **Logs** view. This gives additional context about the error, and information about how to resolve it. \n\n```\n“You cannot confirm this PaymentIntent because it's missing a payment method. You can either update the PaymentIntent with a payment method and then confirm it again, or confirm it again directly with a payment method or ConfirmationToken.”\n```\n\nIt also shows the request body sent with the API call that generated the error. \n\nThe Logs view shows the 7 API requests that produced the error message. Select any of these logs to dig deeper into that particular API request:  \n\n![](/images/error-handling-workbench/error-handling-workbench5.png)\n\nChoosing one of the logs displays in-depth information about the request such as the origin, the source, the API version and the request and response body of the API call:  \n\n![](/images/error-handling-workbench/error-handling-workbench6.png)\n\nStripe integrations that are built using one of the [Stripe SDKs](https://docs.stripe.com/libraries) each contain an error object with a `type` attribute. Use this to look up the [types of error and responses](https://docs.stripe.com/error-handling\\#error-types) from the Stripe docs page. Once you locate the error type, select it to view detailed actionable solutions. You can also use the `doc_url` attribute which links directly to the error-code handling page within the Stripe docs.\n\n![](/images/error-handling-workbench/error-handling-workbench9.png)\n\n### Strategies for handling errors\n\nStripe workbench helps you find, group, and solve errors within your Stripe integrations, but in addition to this there are some best practices you can use to handle errors as they occur in your integrations.\n\n#### Catching inside your code\n\nTry/catch blocks allow you to try an action and then if an exception occurs, catch the exception (error) and deal with it gracefully rather than crashing the entire application. This allows you to catch the specific error thrown by Stripe, interpret it, and provide a friendly, informative message to your user. \n\nWhen you catch an exception, you can [use its type attribute to choose a response](https://docs.stripe.com/error-handling?lang=node#error-types). How you implement try/catch blocks will differ depending on the SDK runtime you are using. The following example shows a try/catch exception block using the [Node.js SDK](https://docs.stripe.com/libraries):\n\n```javascript\nconst stripe = require('stripe')('sk_test_123456');  \nasync function myFunction(args) {\n  try {\n    const paymentIntent = await stripe.paymentIntents.create(args);\n    console.log('No error.');\n  } catch (e) {\n    switch (e.type) {\n     case 'StripeInvalidRequestError':\n        console.log('An invalid request occurred.');\n        break;\ncase 'StripeCardError':\n        console.log(`A payment error occurred: ${e.message}`);\n        break;\n      default:\n        console.log('Some other problem occurred, maybe unrelated to Stripe.');\n        break;\n    } \n  }  \n}\n```\n\nThis script handles two different types of errors. If it's a `StripeCardError`, it logs that a payment error occurred along with the error message. If it's a `StripeInvalidRequestError`, it logs that an invalid request occurred. For any other type of error, it logs a generic message.\n\n### Reacting to events\n\nStripe can send events to webhook endpoints and cloud services, such as [Amazon EventBridge](https://aws.amazon.com/eventbridge/) to notify you of activity within your Stripe account. This can include errors. These events can occur both immediately after an API request or at a later time, such as when a payment is settled, a subscription renews, or when a payment fails. Webhooks ensure that your application stays in sync with the latest object updates allowing you to respond to events in near real-time and maintain accurate records of transactions and account activities.\n\nYou can use the [Interactive webhook builder](https://docs.stripe.com/webhooks/quickstart) to set up and deploy a webhook that “listens” to Stripe events. When creating your webhook, you can use Workbench to specify which events to listen for. The following webhook is configured to listen only for `payment_intent.payment_failed` events.\n![](/images/error-handling-workbench/error-handling-workbench7b.png)\n\n\nWhen receiving events that relate to an error there are some sequential steps you should follow to “unpack” the event, pinpoint the error and take action to resolve:\n\n1. Access `event.data.object` to retrieve the affected object: When Stripe sends a webhook event, the payload includes information about the event in the event.data.object property. This object contains details about the Stripe resource that triggered the event.\n\n2. Obtain stored information about failures from `event.data.object.last_payment_error`. The webhook event object often includes an error object with additional context about what happened, including any errors that occurred.\n\n3. Use the error type attribute (`event.data.object.last_payment_error.type`) to choose an appropriate response.\n\n   The following code example demonstrates how to implement these three steps in Node.js:  \n   \n```javascript\n // Define a POST route to receive a payment intent error \napp.post('/webhook', express.json({type: 'application/json'}), (request, response) => {\n\n  // 1. Get an event object\n    const event = request.body;\n    if (event.type == 'payment_intent.payment_failed') {\n\n  //2.  Use stored information to get an error object\n      const error = event.data.object.last_payment_error;\n\n  //3. Use its type to choose a response\n      switch (error.type) {\n        case 'card_error':\n          console.log(`A payment error occurred: ${error.message}`);\n          break;\n        default:\n          console.log('Another problem occurred, maybe unrelated to Stripe.');\n          break;\n      }\n    } \n    response.send();\n  });\n  ```\n\nWebhooks deliveries can also fail for various reasons. You can view the delivery success of each webhook in the Workbench **Webhooks** tab. Here you can also filter by delivery status.\n\n![](/images/error-handling-workbench/error-handling-workbench8b.png)\n\n\n\n### Retrieve historical errors\n\nThe previous example receives a webhook event when a paymentIntent failure occurs and accesses the `last_payment_error` attribute to retrieve additional information about the error. Many other Stripe objects store previous error information in this way. Use this same technique on these objects to access the previous error type and refer to  the documentation for each type for advice about how to respond:\n\nThese are common objects that store information about failures, and the attribute you should use to access that information.\n\n| OBJECT | ATTRIBUTE | VALUES |\n| :---- | :---- | :---- |\n| [Payment Intent](https://docs.stripe.com/api/payment\\_intents) | `last_payment_error` | [An error object](https://docs.stripe.com/error-handling?lang=node\\&locale=en-GB\\#work-with-error-objects) |\n| [Setup Intent](https://docs.stripe.com/api/setup\\_intents) | `last_setup_error` | [An error object](https://docs.stripe.com/error-handling?lang=node\\&locale=en-GB\\#work-with-error-objects) |\n| [Invoice](https://docs.stripe.com/api/invoices) | `last_finalization_error` | [An error object](https://docs.stripe.com/error-handling?lang=node\\&locale=en-GB\\#work-with-error-objects) |\n| [Setup Attempt](https://docs.stripe.com/api/setup\\_attempts) | `setup_error` | [An error object](https://docs.stripe.com/error-handling?lang=node\\&locale=en-GB\\#work-with-error-objects) |\n| [Payout](https://docs.stripe.com/api/payouts) | `failure_code` | [A payout failure code](https://docs.stripe.com/api/payouts/failures) |\n| [Refund](https://docs.stripe.com/api/refunds) | `failure_reason` | [A refund failure code](https://docs.stripe.com/api/refunds/object\\#refund\\_object-failure\\_reason) |\n\nFor example, use the following Node.js code to access previous failure information for a SetupIntent:\n\n```javascript\nconst setup_intent = await stripe.setupIntents.retrieve('{{SETUP_INTENT_ID}}')  \nconst e = setup_intent.last_setup_error\n\nif (e !== null) {  \n  console.log(`SetupIntent  ${setup_intent.id} experienced a ${e.type} error.`)  \n}\n```\n\n## Conclusion\n\nWorkbench addresses common challenges you face when handling errors in building Stripe integrations. It centralizes error reporting, providing you with a comprehensive view of recent issues, their frequency, and contextual information for efficient troubleshooting. \n\nUsing Workbench, combined with established error handling strategies enables more robust integrations. Some approaches discussed include implementing try-catch exceptions to gracefully manage errors, using webhooks to react to events, and accessing stored error information on Stripe objects. \n\nBy employing these methods and using Workbench's features such as grouped error views, detailed logs, and actionable advice, you can more effectively identify, understand, and resolve integration issues. This approach to error management supports the creation of more reliable payment systems, ultimately improving the overall user experience in online transactions.\n\n\n\n","authorBio":"","additionalResources":[{"title":"Subscribe to Stripe Developers on YouTube.","url":"https://www.youtube.com/stripedevelopers\""},{"title":"Follow us at @Stripedev on twitter for updates and answers to your developer questions.","url":"https://twitter.com/stripedev"},{"title":"Sign up for the Developer Digest.","url":"https://go.stripe.global/dev-digest"},{"title":"Join the Stripe Discord server to chat live with other developers.","url":"https://discord.com/invite/RuJnSBXrQn"},{"title":"Join Stripe Insiders to try the latest features and provide direct feedback to the teams that build them.","url":"https://insiders.stripe.dev"}],"relatedArticles":[{"slug":"bringing-your-stripe-objects-to-life-with-workbench","title":"Bringing your Stripe objects to life with Workbench","summary":"This post shows how to use the Stripe Workbench Inspector to examine the lifecycle of a PaymentIntent object.","authors":["Ben Smith"],"date":"2024-08-29","type":"Blog","topics":["Workbench","Payment Intents"],"artConfig":{"ampX":1.720000000000003,"ampY":1,"aspectRatio":1,"axis":"x","lump":0,"count":25,"freq":1,"isDial":false,"isLineart":false,"isRing":false,"isSpiral":false,"isBalls":true,"isMatrix":true,"left":-120,"mouseX":0.5422453703703703,"mouseY":0.5581668625146886,"noise":3.2309999999999084,"scale":1.323999999999992,"top":-50,"twirl":0.06299999999999983,"twist":15.419999999999984,"velocity":1,"shape":"ellipse"}},{"slug":"advanced-error-handling-patterns-for-Stripe-enterprise-developers","title":"Advanced error handling patterns for Stripe enterprise developers","summary":"This post demonstrates some more advanced patterns to help you build resilient and robust payment systems to integrate Stripe with your enterprise applications. As your integration grows in complexity and volume, these patterns become crucial for maintaining system stability and providing a smooth user experience.","authors":["Ben Smith"],"date":"2024-09-03","type":"Blog","topics":["Workbench","Error Handling"],"artConfig":{"ampX":0.24321052757950756,"ampY":0.21234603378855432,"aspectRatio":1.891098642361734,"axis":"x","lump":-0.2663789659738541,"count":130,"freq":3.0281107682703468,"isDial":false,"isLineart":false,"isRing":false,"isSpiral":false,"isBalls":false,"isMatrix":false,"left":50,"kaleids":6.605468751812275,"mouseX":0.9577546296296297,"mouseY":0.90625,"noise":0.6708555158071439,"scale":0.7786845318092911,"top":2,"twirl":0.005405418018509103,"twist":5.116850969437312,"velocity":1,"shape":"line"}}]},"authors":[{"name":"Ben Smith","slug":"ben-smith","profile":"Ben is a Staff Developer Advocate at Stripe, based in the UK. Previously, he was a Principal Developer Advocate at AWS, specializing in serverless architecture. With a background in web development, he is passionate about empowering developers through knowledge sharing and community engagement, making complex technologies accessible to all.","posts":[{"slug":"how-do-i-store-inventory-data-in-my-stripe-application","authorBio":"","title":"How do I store inventory data in my Stripe application","summary":"Explore the critical importance of managing real-time inventory updates for both online marketplaces and physical stores. This blog post details the development of an event-driven architecture designed to synchronize inventory levels with Stripe payment events using AWS cloud services. The demonstration centers around the DevRel Swag Store, showcasing a practical application used at the GOTO Chicago event, which integrates serverless technologies like Amazon DynamoDB, AWS Lambda, and IoT Core for efficient inventory management. Learn about the challenges of using Stripe metadata for inventory, and discover robust solutions for handling race conditions and implementing dynamic inventory checks. Additionally, understand the trade-offs between using Stripe Payment Links and custom payment processes for real-time stock validation.","authors":["Ben Smith"],"date":"2024-12-16","type":"Blog","topics":["Event Destinations","AWS"],"artConfig":{"ampX":0.24321052757950756,"ampY":0.21234603378855432,"aspectRatio":1.891098642361734,"axis":"x","lump":-0.2663789659738541,"count":130,"freq":3.0281107682703468,"isDial":false,"isLineart":false,"isRing":false,"isSpiral":false,"isBalls":false,"isMatrix":false,"left":50,"kaleids":6.605468751812275,"mouseX":0.9577546296296297,"mouseY":0.90625,"noise":0.6708555158071439,"scale":0.7786845318092911,"top":2,"twirl":0.005405418018509103,"twist":5.116850969437312,"velocity":1,"shape":"line"}},{"slug":"data-access-patterns-for-simple-stripe-Integrations","authorBio":"","title":"Data access patterns for simple Stripe Integrations","summary":"Is your Stripe integration ready to scale with your application? In this blog post, explore smart data strategies to enhance performance and security. Learn how to leverage Stripe/'s features, secure web backends, and serverless functions for efficient data management. Discover when to integrate a global CDN and use a separate database for deeper data control, ensuring a seamless user experience.","authors":["Ben Smith"],"date":"2024-11-27","type":"Blog","topics":["Event Destinations","AWS","Serverless"],"artConfig":{"ampX":0.24321052757950756,"ampY":0.21234603378855432,"aspectRatio":1.891098642361734,"axis":"x","lump":-0.2663789659738541,"count":130,"freq":3.0281107682703468,"isDial":false,"isLineart":false,"isRing":false,"isSpiral":false,"isBalls":false,"isMatrix":false,"left":50,"kaleids":6.605468751812275,"mouseX":0.9577546296296297,"mouseY":0.90625,"noise":0.6708555158071439,"scale":0.7786845318092911,"top":2,"twirl":0.005405418018509103,"twist":5.116850969437312,"velocity":1,"shape":"line"}},{"slug":"growing-your-stripe-integration-with-event-destinations","authorBio":"","title":"Growing Your Stripe Integration With Event Destinations","summary":"Event Destinations has begun rolling out to general availability as of 10/30 and will soon be enabled for all accounts. This post explores how to use Stripe Event Destinations and Amazon EventBridge to achieve near infinite customization possibilities for your payment solutions without disrupting your existing integrations.","authors":["Ben Smith"],"date":"2024-10-31","type":"Blog","topics":["Event Destinations","AWS"],"artConfig":{"ampX":0.24321052757950756,"ampY":0.21234603378855432,"aspectRatio":1.891098642361734,"axis":"x","lump":-0.2663789659738541,"count":130,"freq":3.0281107682703468,"isDial":false,"isLineart":false,"isRing":false,"isSpiral":false,"isBalls":false,"isMatrix":false,"left":50,"kaleids":6.605468751812275,"mouseX":0.9577546296296297,"mouseY":0.90625,"noise":0.6708555158071439,"scale":0.7786845318092911,"top":2,"twirl":0.005405418018509103,"twist":5.116850969437312,"velocity":1,"shape":"line"}},{"slug":"choosing-the-right-sandbox-strategy-for-your-organization","authorBio":"","title":"Choosing the right sandbox strategy for your organization","summary":"Stripe Sandboxes offer a powerful solution for isolating testing environments, but how you implement them can make all the difference. Pick a sandbox strategy that best suits your organizations development approach and team size.","authors":["Ben Smith"],"date":"2024-09-26","type":"Blog","topics":["Sandboxes"],"artConfig":{"ampX":1.367128437063478,"ampY":2.0936337963955425,"aspectRatio":1.5242133042669057,"axis":"xy","lump":0.9123757707981675,"count":88.60000000000001,"freq":3.785997393314164,"isDial":false,"isLineart":true,"isRing":true,"isSpiral":false,"left":-80,"mouseX":0.5121527777777778,"mouseY":0.4894613583138173,"noise":0,"scale":2.294388755555997,"top":150,"twirl":0.006193707110889813,"twist":1.3885165542029452,"velocity":1,"shape":"rect"}},{"slug":"upgrading-your-stripe-plugin-security","authorBio":"","title":"Upgrading your Stripe plugin security","summary":"Secure your Stripe integrations by ditching unrestricted secret keys—learn how to protect merchant accounts with restricted access API keys and OAuth 2.0, and avoid compliance fees.","authors":["Ben Smith"],"date":"2024-09-19","type":"Blog","topics":["Stripe Apps"],"artConfig":{"ampX":0.24321052757950756,"ampY":0.21234603378855432,"aspectRatio":1.891098642361734,"axis":"x","lump":-0.2663789659738541,"count":130,"freq":3.0281107682703468,"isDial":false,"isLineart":false,"isRing":false,"isSpiral":false,"isBalls":false,"isMatrix":false,"left":50,"kaleids":6.605468751812275,"mouseX":0.9577546296296297,"mouseY":0.90625,"noise":0.6708555158071439,"scale":0.7786845318092911,"top":2,"twirl":0.005405418018509103,"twist":5.116850969437312,"velocity":1,"shape":"line"}},{"slug":"avoiding-test-mode-tangles-with-stripe-sandboxes","authorBio":"","title":"Avoiding test mode tangles with Stripe Sandboxes","summary":"Discover how to create independent testing environments with Stripe Sandboxes, streamline your development through GitHub automation, and prioritize the security of your API keys to enhance your payment integration process.","authors":["Ben Smith"],"date":"2024-09-16","type":"Blog","topics":["Sandboxes"],"artConfig":{"ampX":1.1642105275795096,"ampY":0.21234603378855432,"aspectRatio":1.791098642361734,"axis":"y","lump":0.7446210340261474,"count":109.99999999999999,"freq":3.0281107682703468,"isDial":false,"isLineart":false,"isRing":false,"isSpiral":false,"isBalls":false,"isMatrix":false,"left":0,"kaleids":2.5900000000000083,"mouseX":0.6134259259259259,"mouseY":0.7247983870967742,"noise":0,"scale":1.1986845318092938,"top":2,"twirl":0.005405418018509103,"twist":4.438000000000008,"velocity":0.5109999999999996,"shape":"ellipse"}},{"slug":"advanced-error-handling-patterns-for-Stripe-enterprise-developers","authorBio":"","title":"Advanced error handling patterns for Stripe enterprise developers","summary":"This post demonstrates some more advanced patterns to help you build resilient and robust payment systems to integrate Stripe with your enterprise applications. As your integration grows in complexity and volume, these patterns become crucial for maintaining system stability and providing a smooth user experience.","authors":["Ben Smith"],"date":"2024-09-03","type":"Blog","topics":["Workbench","Error Handling"],"artConfig":{"ampX":0.24321052757950756,"ampY":0.21234603378855432,"aspectRatio":1.891098642361734,"axis":"x","lump":-0.2663789659738541,"count":130,"freq":3.0281107682703468,"isDial":false,"isLineart":false,"isRing":false,"isSpiral":false,"isBalls":false,"isMatrix":false,"left":50,"kaleids":6.605468751812275,"mouseX":0.9577546296296297,"mouseY":0.90625,"noise":0.6708555158071439,"scale":0.7786845318092911,"top":2,"twirl":0.005405418018509103,"twist":5.116850969437312,"velocity":1,"shape":"line"}},{"slug":"bringing-your-stripe-objects-to-life-with-workbench","authorBio":"","title":"Bringing your Stripe objects to life with Workbench","summary":"This post shows how to use the Stripe Workbench Inspector to examine the lifecycle of a PaymentIntent object.","authors":["Ben Smith"],"date":"2024-08-29","type":"Blog","topics":["Workbench","Payment Intents"],"artConfig":{"ampX":1.720000000000003,"ampY":1,"aspectRatio":1,"axis":"x","lump":0,"count":25,"freq":1,"isDial":false,"isLineart":false,"isRing":false,"isSpiral":false,"isBalls":true,"isMatrix":true,"left":-120,"mouseX":0.5422453703703703,"mouseY":0.5581668625146886,"noise":3.2309999999999084,"scale":1.323999999999992,"top":-50,"twirl":0.06299999999999983,"twist":15.419999999999984,"velocity":1,"shape":"ellipse"}}]}],"estimatedReadingTime":"6 min read"},"__N_SSG":true}