{"pageProps":{"postData":{"slug":"resolving-production-issues-in-your-aws-stripe-integration-using-workbench","title":"Resolving production issues in your AWS/Stripe integration using Workbench","summary":"This blog shows how to find when something is wrong in production, avoid jumping between tabs/docs to find information, and resolving issues quickly in the troubleshooting process, using an AWS integration as a starting point.","authors":["James Beswick"],"date":"2024-08-21","type":"Blog","topics":["Workbench","AWS"],"artConfig":{"ampX":1.6155547739194231,"ampY":0.16105222953795506,"aspectRatio":4.846182045765707,"axis":"xy","lump":0.012257571935580414,"count":20,"freq":3.0367582350683,"isDial":false,"isLineart":false,"isRing":false,"isSpiral":false,"left":0,"mouseX":0.5011574074074074,"mouseY":0.482962962962963,"noise":0,"scale":3.7,"top":0,"twirl":0.1,"twist":10.44243260386455,"velocity":1,"shape":"rect"},"content":"\n\nFor AWS developers integrating with third-party APIs outside of your AWS account, there are several common problems that can cause your production application to behave unexpectedly. \n\nWith Workbench, [Stripe](https://docs.stripe.com/development) provides next-generation debugging tools that make it easier and faster to pinpoint, understand, and resolve production problems. Stripe logs detailed information about every API request in your account without additional charges. Workbench provides powerful filtering and insights capabilities to help search logs quickly and find application requests. \n\nThis blog post shows how to find and resolve common production issues by using Workbench and provides recommendations for addressing those issues.\n\n### Getting started with Workbench\n\nTo use Workbench:\n\n1. Navigate to [https://dashboard.stripe.com/](https://dashboard.stripe.com/) in your preferred browser and log into your Stripe account.   \n2. If you have multiple accounts configured, use the drop-down in the top-left to select which account API activity you want to view. Workbench reports and content are scoped to the account level.  \n3. In the bottom-right corner of the browser, hover over the terminal icon to expand the menu, then select the caret symbol to open Workbench.\n\n![](/images/workbench-common/caret-dark3.png)\n\n4. Workbench opens in the lower portion of the window:\n\n![](/images/workbench-common/workbench-screen.png)\n\n*Workbench is not a browser extension and does not rely on CLIs or other tools in your development machine, so you can use it immediately without the need for installing additional software.*\n\n### Detecting duplicate API calls from an application\n\nIn this scenario, you expected code to call an API endpoint once but instead the endpoint was called twice or more. The code worked as expected in development and this issue only appears sporadically in production.\n\n![](/images/aws-resolve/aws-resolve3.png)\n\nAWS offers a range of options to host your application, from serverless compute like AWS Lambda to containerized services like Amazon ECS. Some of these services provide high availability by hosting your code or application in multiple underlying availability zones. The trade-off is that there may not be an exactly-once processing guarantee.\n\nIn the case of Lambda, if the function errors out unexpectedly or if there is a transient network error, the service will retry executing your code. This means that an API call can be retried again, and Stripe is unaware that you didn’t explicitly retry in code. This can also happen if the Lambda service experiences issues in an availability zone, so you should expect that it’s possible for the code to be executed more than once. While you often don’t see these issues in the development process, as systems receive more traffic, these transient failures become more common in the long tail of traffic. \n\nTo mitigate this issue, when calling a Stripe POST API, it’s recommended that you use an [idempotency](https://en.wikipedia.org/wiki/Idempotence) header in your request to prevent duplicate requests from having unintended side effects. Most common client libraries can add idempotency requests to API calls automatically, but the feature usually must be enabled first. Since you have limited control over compute services that may invoke your code more than once, the idempotency header allows Stripe to ignore requests that it may have seen before. Stripe’s GET and DELETE APIs are already guaranteed idempotent without needing this key.\n\n*Learn more about [designing with idempotency with AWS Lambda](https://aws.amazon.com/blogs/compute/handling-lambda-functions-idempotency-with-aws-lambda-powertools/) and [making retries safe in AWS compute services](https://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/).* \n\n### Using Workbench to find duplicate API calls\n\nIf your application unexpectedly calls an API more than once, you can use Workbench to detect this behavior. Go to the **Logs** tab and search by the resource ID to quickly filter the logs for a specific request. You can use additional filters to drill down by HTTP method and API endpoint if needed. \n\nIn the example below, this AWS-hosted application calls the `/v1/prices` endpoint multiple times with the same payload. The *Idempotency* header is different for each request, indicating that it either hasn’t been set correctly, or hasn’t been used by the client. Choosing one of the requests shows the multiple pricing requests in the UI.\n\n![](/images/aws-resolve/aws-resolve4.png)\n\n### Identifying why an application’s API request has failed\n\nIf your AWS logs confirm that an API request has been sent, you can search in Workbench to ensure that Stripe received it. If the log is missing, it was not processed by Stripe, and you should check that the code has the necessary permission to reach the API. You should also verify the URL used in the API call, and any egress restrictions in your AWS account that may prevent the traffic from reaching the endpoint.\n\nThe HTTP status code in the response defines the broad type of error. You can see this in your AWS application logs, but it doesn’t always indicate there is an issue with your code or the Stripe service. Code 401 and 403 indicate issues with your API key, while 402 means there is a problem with the payment details provided. Response codes in the 5xx range are rare and are caused by a problem at Stripe. \n\n*Learn about [Stripe’s HTTP error codes](https://docs.stripe.com/error-low-level\\#errors-in-http).*\n\n### Learning more in Workbench\n\nThe **Logs** tab in Workbench allows you to filter by *Status* (e.g. “Failed”) to list all the failed API calls from your application. From here, you can drill down into any request and learn more about the request and response bodies. While credit card data is masked, the **Error insights** panel can indicate problems with the card information provided. \n\n![](/images/aws-resolve/aws-resolve5.png)\n\nThis is useful for tracking individual errors but if users of your production application are reporting multiple problems, the **Errors** tab can give you more information and help accelerate problem resolution. This section aggregates errors by type, allowing you to find the common cause of the bulk of the errors, and then drill down into specific data. \n\n![](/images/aws-resolve/aws-resolve6.png)\n\nYou can also use the **Overview** tab in conjunction with this view to detect rate limiting. This results in 429 HTTP errors to requests and can be seen in busy systems in production. You can [contact Stripe support](https://support.stripe.com/) to request limit increases but in some cases you can rearchitect your AWS-based application to avoid bursts of requests to the Stripe API and smooth out traffic. \n\n*Learn more about [Stripe’s rate limits](https://docs.stripe.com/rate-limits).*\n\n### Locating and resending Stripe events that never appear in your AWS account\n\nMany Stripe processes are asynchronous and take time to complete. To avoid polling APIs for changes and to help synchronize state closer to real-time, Stripe can push data changes directly to your AWS account as events. Once configured, events arrive in the partner event bus of the [Amazon EventBridge](https://aws.amazon.com/eventbridge/) service, where you can then route to other services to take appropriate action. However, the service does not log if events fail to arrive, so your application is unaware of the missing data.\n\n![](/images/aws-resolve/aws-resolve7.png)\n\n### Using Workbench to detect and replay failed events\n\nIn the **Event destinations** tab, set the *Status* filter to “Failed/Pending” to show a list of events that have not been delivered successfully. Click on an event to load the detailed view. From here, the **Delivery attempts** panel shows the history of failed delivery, together with the option to resend to the event bus. Clicking one of these delivery attempts shows additional information about why the delivery failed.\n\n![](/images/aws-resolve/aws-resolve8.png)\n\n*Learn more about [setting up Stripe events in your AWS account](https://docs.stripe.com/event-destinations/eventbridge).*\n\n### Conclusion\n\nMany AWS customers use Stripe for processing payments by calling Stripe’s APIs from their hosted applications. There are many runtime errors that can occur in production, from service failures to errors in user-provider credit card information. While you can use logs from your applications to locate failed calls, in many cases it's faster to use Stripe’s Workbench tool to isolate and resolve the cause of the problem.\n\nWorkbench logs verbose information about APIs at no extra charge to users and provides rich filtering capabilities and insights. This blog post shows how to use this to identify duplicate API calls, unexpected HTTP errors, and locate and resend events that are not reaching their AWS targets.\n\nIf there are more features you would like to see, let us know by clicking the **Send feedback** button at the top of the panel.\n\n\n","authorBio":"","additionalResources":[{"title":"Subscribe to Stripe Developers on YouTube.","url":"https://www.youtube.com/stripedevelopers\""},{"title":"Follow us at @Stripedev on twitter for updates and answers to your developer questions.","url":"https://twitter.com/stripedev"},{"title":"Sign up for the Developer Digest.","url":"https://go.stripe.global/dev-digest"},{"title":"Join the Stripe Discord server to chat live with other developers.","url":"https://discord.com/invite/RuJnSBXrQn"},{"title":"Join Stripe Insiders to try the latest features and provide direct feedback to the teams that build them.","url":"https://insiders.stripe.dev"}],"relatedArticles":[{"slug":"resolving-production-issues-in-your-aws-stripe-integration-using-workbench","title":"Resolving production issues in your AWS/Stripe integration using Workbench","summary":"This blog shows how to find when something is wrong in production, avoid jumping between tabs/docs to find information, and resolving issues quickly in the troubleshooting process, using an AWS integration as a starting point.","authors":["James Beswick"],"date":"2024-08-21","type":"Blog","topics":["Workbench","AWS"],"artConfig":{"ampX":1.6155547739194231,"ampY":0.16105222953795506,"aspectRatio":4.846182045765707,"axis":"xy","lump":0.012257571935580414,"count":20,"freq":3.0367582350683,"isDial":false,"isLineart":false,"isRing":false,"isSpiral":false,"left":0,"mouseX":0.5011574074074074,"mouseY":0.482962962962963,"noise":0,"scale":3.7,"top":0,"twirl":0.1,"twist":10.44243260386455,"velocity":1,"shape":"rect"}},{"slug":"advanced-error-handling-patterns-for-Stripe-enterprise-developers","title":"Advanced error handling patterns for Stripe enterprise developers","summary":"This post demonstrates some more advanced patterns to help you build resilient and robust payment systems to integrate Stripe with your enterprise applications. As your integration grows in complexity and volume, these patterns become crucial for maintaining system stability and providing a smooth user experience.","authors":["Ben Smith"],"date":"2024-09-03","type":"Blog","topics":["Workbench","Error Handling"],"artConfig":{"ampX":0.24321052757950756,"ampY":0.21234603378855432,"aspectRatio":1.891098642361734,"axis":"x","lump":-0.2663789659738541,"count":130,"freq":3.0281107682703468,"isDial":false,"isLineart":false,"isRing":false,"isSpiral":false,"isBalls":false,"isMatrix":false,"left":50,"kaleids":6.605468751812275,"mouseX":0.9577546296296297,"mouseY":0.90625,"noise":0.6708555158071439,"scale":0.7786845318092911,"top":2,"twirl":0.005405418018509103,"twist":5.116850969437312,"velocity":1,"shape":"line"}}]},"authors":[{"name":"James Beswick","slug":"james-beswick","profile":"James leads the Stripe Developer Relations team, helping our developer customers build solutions and learn about the benefits that Stripe offers for their workloads. He was previously a Developer Advocacy leader at AWS and loves helping startups and enterprise teams use technology to wow their customers and grow their businesses.","posts":[{"slug":"securing-stripe-api-keys-aws-automatic-rotation","authorBio":"","title":"Securing Stripe API Keys in AWS with Automatic Rotation","summary":"Learn how to securely manage and automatically rotate your Stripe API keys in AWS for a production-grade approach. This guide covers best practices, tools, and strategies to enhance the security of your financial transactions.","authors":["James Beswick"],"date":"2025-02-21","type":"Blog","topics":["AWS"],"artConfig":{"ampX":0.7,"ampY":1,"aspectRatio":1,"axis":"y","lump":-0.696000000000001,"count":62.400000000000084,"freq":1.2,"isDial":false,"isLineart":false,"isRing":false,"isSpiral":false,"isBalls":false,"isMatrix":false,"left":-50,"kaleids":6,"mouseX":0.8206018518518519,"mouseY":0.2247983870967742,"noise":0,"scale":0.6049999999999953,"top":0,"twirl":0,"twist":-3.582,"velocity":1,"shape":"rect"}},{"slug":"building-solid-stripe-integrations-developers-guide-success","authorBio":"James leads the Stripe Developer Relations team, helping our developer customers build solutions and learn about the benefits that Stripe offers for their workloads. He was previously a Developer Advocacy leader at AWS and loves helping startups and enterprise teams use technology to wow their customers and grow their businesses.","title":"Building Rock-Solid Stripe Integrations: A Developer's Guide to Success","summary":"Learn about Stripe integrations with essential tips for robust, secure payment systems and seamless user experiences. This guide prepares developers for real-world scenarios, from subscription management to dispute resolution, ensuring secure and seamless payments.","authors":["James Beswick"],"date":"2025-02-06","type":"Blog","topics":["Getting Started"],"artConfig":{"ampX":0.7,"ampY":1,"aspectRatio":1,"axis":"y","lump":-0.696000000000001,"count":62.400000000000084,"freq":1.2,"isDial":false,"isLineart":false,"isRing":false,"isSpiral":false,"isBalls":false,"isMatrix":false,"left":-50,"kaleids":6,"mouseX":0.8206018518518519,"mouseY":0.2247983870967742,"noise":0,"scale":0.6049999999999953,"top":0,"twirl":0,"twist":-3.582,"velocity":1,"shape":"rect"}},{"slug":"building-resilient-webhook-handlers-aws-dlqs-stripe-events","authorBio":"","title":"Building Resilient Webhook Handlers in AWS: Implementing DLQs for Stripe Events","summary":"Discover how to build reliable webhook handlers for Stripe events using AWS in this comprehensive guide. Learn about the challenges of processing webhook events at scale and how to address them with an enterprise-grade architecture.","authors":["James Beswick"],"date":"2025-01-30","type":"Blog","topics":["AWS"],"artConfig":{"ampX":0.7,"ampY":1,"aspectRatio":1,"axis":"y","lump":-0.696000000000001,"count":62.400000000000084,"freq":1.2,"isDial":false,"isLineart":false,"isRing":false,"isSpiral":false,"isBalls":false,"isMatrix":false,"left":-50,"kaleids":6,"mouseX":0.8206018518518519,"mouseY":0.2247983870967742,"noise":0,"scale":0.6049999999999953,"top":0,"twirl":0,"twist":-3.582,"velocity":1,"shape":"rect"}},{"slug":"new-to-stripe-learn-key-concepts-software-developers","authorBio":"","title":"New to Stripe? Learn the key concepts for software developers.","summary":"Discover the key concepts and terms for integrating Stripe in your applications. This guide covers Payment Intents Customer management, Subscription billing, Webhooks, Disputes, Refunds, and the benefits of expanded responses, providing developers with the tools they need to streamline payment processing efficiently.","authors":["James Beswick"],"date":"2025-01-29","type":"Blog","topics":["Getting Started"],"artConfig":{"ampX":1.6155547739194231,"ampY":0.16105222953795506,"aspectRatio":4.846182045765707,"axis":"xy","lump":0.012257571935580414,"count":20,"freq":3.0367582350683,"isDial":false,"isLineart":false,"isRing":false,"isSpiral":false,"left":0,"mouseX":0.5011574074074074,"mouseY":0.482962962962963,"noise":0,"scale":3.7,"top":0,"twirl":0.1,"twist":10.44243260386455,"velocity":1,"shape":"rect"}},{"slug":"managing-multiple-stripe-test-environments-from-aws","authorBio":"","title":"Managing multiple Stripe test environments from your AWS-hosted application","summary":"Stripe sandboxes enhance test environment management, offering improved functionality over test mode, allowing isolated accounts, multiple developers, and better access control while integrating seamlessly with AWS applications.","authors":["James Beswick"],"date":"2024-11-26","type":"Blog","topics":["Sandboxes","AWS"],"artConfig":{"ampX":0.7,"ampY":1,"aspectRatio":1,"axis":"y","lump":-0.696000000000001,"count":62.400000000000084,"freq":1.2,"isDial":false,"isLineart":false,"isRing":false,"isSpiral":false,"isBalls":false,"isMatrix":false,"left":-50,"kaleids":6,"mouseX":0.8206018518518519,"mouseY":0.2247983870967742,"noise":0,"scale":0.6049999999999953,"top":0,"twirl":0,"twist":-3.582,"velocity":1,"shape":"rect"}},{"slug":"using-demo-data-for-testing-stripe-integrations-in-aws","authorBio":"","title":"Using demo data for testing Stripe integrations in AWS-hosted applications","summary":"This post discusses integrating the Stripe agent toolkit with large language models (LLMs) to enhance automation workflows, enabling financial services access, metered billing, and streamlined operations across agent frameworks.","authors":["James Beswick"],"date":"2024-11-22","type":"Blog","topics":["Sandboxes"],"artConfig":{"ampX":1.6155547739194231,"ampY":0.16105222953795506,"aspectRatio":4.846182045765707,"axis":"xy","lump":0.012257571935580414,"count":20,"freq":3.0367582350683,"isDial":false,"isLineart":false,"isRing":false,"isSpiral":false,"left":0,"mouseX":0.5011574074074074,"mouseY":0.482962962962963,"noise":0,"scale":3.7,"top":0,"twirl":0.1,"twist":10.44243260386455,"velocity":1,"shape":"rect"}},{"slug":"debugging-your-aws-stripe-integration-just-got-easier","authorBio":"","title":"Debugging your AWS/Stripe integration just got easier","summary":"For developers building on AWS, you have various choices for processing payments within your application. Most developers choose a payment processing service to handle this part of their application flow, which involves integrating with a third-party vendor outside of the AWS environment.","authors":["James Beswick"],"date":"2024-08-21","type":"Blog","topics":["Workbench","AWS"],"artConfig":{"ampX":0.7,"ampY":1,"aspectRatio":1,"axis":"y","lump":-0.696000000000001,"count":62.400000000000084,"freq":1.2,"isDial":false,"isLineart":false,"isRing":false,"isSpiral":false,"isBalls":false,"isMatrix":false,"left":-50,"kaleids":6,"mouseX":0.8206018518518519,"mouseY":0.2247983870967742,"noise":0,"scale":0.6049999999999953,"top":0,"twirl":0,"twist":-3.582,"velocity":1,"shape":"rect"}}]}],"estimatedReadingTime":"5 min read"},"__N_SSG":true}