{"pageProps":{"postData":{"slug":"debugging-your-stripe-invoicing-integration-with-workbench","title":"Debugging your Stripe Invoicing integration with Workbench","summary":"With Stripe Invoicing, you can create and manage invoices for one-time and recurring payments. Whether caused by infrastructure issues or coding bugs, integration failures do sometimes happen, which can prevent invoices from being paid in a timely manner.","authors":["David Edoh-Bedi"],"date":"2024-08-29","type":"Blog","topics":["Workbench","Invoicing"],"artConfig":{"ampX":1.8364052695935116,"ampY":0.7713401032732738,"aspectRatio":1.7238093835504644,"axis":"y","lump":0.9759304509066895,"count":91.4999999999999,"freq":5.2168324480928945,"isDial":false,"isLineart":false,"isRing":false,"isSpiral":false,"left":0,"mouseX":0.5023148148148148,"mouseY":0.06828528072837632,"noise":0,"scale":3.054,"top":100,"twirl":0.1,"twist":51.61800000000121,"velocity":1,"shape":"rect"},"content":"\n\n\n[Stripe invoicing](https://docs.stripe.com/invoicing) enables you to create and manage invoices for one-time or recurring payments. Whether caused by infrastructure issues or coding bugs, integration failures do sometimes happen, which can prevent invoices from being paid in a timely manner.\n\nUsing the new [Stripe Workbench](https://docs.stripe.com/workbench) tool, this post shows you how to debug and fix errors in your invoice integration.  \n\n### Stripe Workbench\n\n[Workbench](https://docs.stripe.com/workbench) is a context-aware tool that allows you to build and debug your Stripe integrations from anywhere in the Dashboard. In response to feedback from Stripe developers, this new feature centralizes previously disparate developer tooling into one central and constantly accessible location. Among other things, you can use Workbench to inspect API objects and run requests on them using the [built-in Shell](https://docs.stripe.com/workbench/shell).\n\nTo get started, navigate to the [Workbench](https://dashboard.stripe.com/workbench) page in your Dashboard and turn the feature on.\n\nWorkbench is organized by tabs, each showing you a different aspect of your integration. A natural starting spot to explore is the **Overview** tab, where you can see:\n\n* API keys and versions.  \n* activity trends in your integration.  \n* recent errors.  \n* useful references to help you get unblocked and submit feedback. \n\n![](/images/invoice-debugging/invoice-debugging1.png)\n\n### The Invoice Object\n\nInvoices are sent by merchants to customers for payment, in exchange for goods and services. In its simplest form, an invoice has a number of key parameters including a [Customer](https://docs.stripe.com/api/customers/object) and an associated [Payment Method](https://docs.stripe.com/api/payment\\_methods).\n\n![](/images/invoice-debugging/invoice-debugging2.png)\n\nA common developer error with Invoice integrations is not properly sending all the required parameters as part of your API call. The following example shows how Workbench makes it easy to debug such errors.  \n\n### Debugging errors in your integration\n\nIn Workbench, the **recent errors** section of the **Overview** tab gives an early indication of potential problems with your integration. To dig deeper, you can look at the **Errors** tab, which gives a holistic view of errors over the last week. \n\nThe leftmost pane of the **Errors** tab contains a list of all the errors. You can choose each individual error for more details, including the actual API request that caused it. \n\n![](/images/invoice-debugging/invoice-debugging3.png)\n\nThis example shows that there was a [`parameter_missing`](https://docs.stripe.com/error-codes#parameter-missing) error. The details show that the Invoice create call was missing a Customer object. As previously mentioned, this prevents the Invoice from being created since there’s no customer to charge\n\n![](/images/invoice-debugging/invoice-debugging4.png)\n\n### Fixing the error\n\nNow that you’ve located the error, navigate to the **Shell** tab for options to fix it. The Shell allows you to run [Stripe CLI](https://docs.stripe.com/stripe-cli) commands from within the dashboard. This saves you having to run the CLI in a separate terminal window.\n\nTo address the error above, you need a Customer object. You can get that by running the `Stripe customers list` command in the Shell prompt at the bottom of the screen. In the response, expand the list of Customers and copy one of the IDs by clicking on the clipboard icon next to it. \n\n![](/images/invoice-debugging/invoice-debugging5.png)\n\nStill within the **Shell** tab, the **API Explorer** offers a surface for understanding endpoints in the Stripe API and their associated parameters. This helps you learn about the different objects in the API and what actions can be performed on them. It saves you from having to switch back and forth between a CLI window and the Stripe docs. Use the API explorer to build out whatever command you’re looking to test and then run it.\n\nTo remediate the invoice creation bug, follow these steps:\n\n1) Find the Invoices object and its corresponding Create endpoint in the dropdown list.   \n2) Paste the Customer ID that you previously copied in the corresponding customer parameter field  \n3) The **Shell** prompt auto-populates as you modify fields in the **API explorer**. You can use this to learn how to construct CLI commands.\n\n4) Another feature in the API explorer is the **Print SDK request** option at the bottom, which allows you to generate code in the [SDK](https://docs.stripe.com/libraries) language of your choosing. You can then reuse this code in your integration, saving you time and potential errors.\n\n![](/images/invoice-debugging/invoice-debugging6-7-8.png)\n\n5) Run the command by clicking on the **Run** button in the lower right corner. Your invoice is now created. Check the response in the Shell and make sure there are no errors. \n\n\n### Inspecting the fix\n\nTo take a deeper look at the resulting invoice, copy its ID from the **Shell** and switch to the **Inspector** tab. This pane provides a way of drilling into any Stripe object down to its JSON representation. The data map feature shows you a hierarchical view of the object, so you can see all the dependencies it has. In this case, you see the newly created Invoice and its attached Customer object.\n\n![](/images/invoice-debugging/invoice-debugging9.png)\n\nThe **Inspector** also provides a **Logs** tab where you can see details of the API calls associated with the invoice.\n\n![](/images/invoice-debugging/invoice-debugging10.png)\n\nThe **Events** tab in the **Inspector** shows the various events that get fired as invoices move through their lifecycle, from creation to payment.\n\n![](/images/invoice-debugging/invoice-debugging11.png)\n\n### Going a step further\n\nAfter fixing the invoice creation process, it’s worth checking that it can actually be paid. To check, run the `Pay` command on the invoice using the **API Explorer** once again.\n\nLooking at the **Events** list again, you can see that new ones have been added. Notably, the invoice payment was successful but for $0. Trial periods are a common use case for zero-dollar invoices.\n\n\n![](/images/invoice-debugging/invoice-debugging12.png)\n\nAs previously mentioned, the example in this article looks at the base case. In order to actually process payments of non-zero monetary value, invoices require [Invoice Items](https://docs.stripe.com/api/invoiceitems) as well, to specify which products or services were sold. \n\nFollow these steps to create Invoice Items using Workbench:\n\n1. Start by creating a [Product](https://docs.stripe.com/api/products) using the API explorer, to represent the goods or services being sold. Make sure to specify a name and price.\n\n\nTo specify a price, use the `default_price_data` hash and add a `unit_amount`.\n\n![](/images/invoice-debugging/invoice-debugging13-14.png)\n\n2. After running the command, copy the Product ID and Price ID (`default_price`) from the response.\n\n\n3. Next, create an Invoice Item with these parameters:  \n   1. the Price ID from the previous step    \n   2. a Customer ID:  you can re-use your previous customer or create a new one.   \n   3. A new Invoice ID: your previous invoice has been paid, so it can no longer be used.\n\n![](/images/invoice-debugging/invoice-debugging16.png)\n\nRun the command in the **API explorer**\n\n\n4. Using the **Inspector**, you can verify that the Invoice has been updated with an item. \n\n\n\n### Wrapping Up\n\nWorkbench offers a powerful new suite of tools for identifying errors in your invoice integration, understanding their causes and fixing them - all without ever exiting your Stripe dashboard. \n\nThis post highlights how you can leverage Workbench to not only debug your invoicing integration, but also inspect all its associated objects. The `parameter_missing` example can be extended to more complex use cases, but the approach stays the same. \n\nFor more details on Invoices, check out how you can [use Workbench to analyze their lifecycle](/blog/peeking-under-the-hood-of-stripe-invoicing). \n\n","authorBio":"","additionalResources":[{"title":"Subscribe to Stripe Developers on YouTube.","url":"https://www.youtube.com/stripedevelopers\""},{"title":"Follow us at @Stripedev on twitter for updates and answers to your developer questions.","url":"https://twitter.com/stripedev"},{"title":"Sign up for the Developer Digest.","url":"https://go.stripe.global/dev-digest"},{"title":"Join the Stripe Discord server to chat live with other developers.","url":"https://discord.com/invite/RuJnSBXrQn"},{"title":"Join Stripe Insiders to try the latest features and provide direct feedback to the teams that build them.","url":"https://insiders.stripe.dev"}],"relatedArticles":[{"slug":"peeking-under-the-hood-of-stripe-invoicing","title":"Peeking under the hood of Stripe Invoicing","summary":"Stripe Invoicing offers a no-code solution for sending invoices to customers. Because this option handles the complexity of all underlying API calls, developers sometimes struggle to understand the different phases a Stripe invoice goes through, which is problematic when attempting to debug payment failures. ","authors":["David Edoh-Bedi"],"date":"2024-08-26","type":"Blog","topics":["Workbench","Invoicing"],"artConfig":{"ampX":2.291128437063488,"ampY":2.0936337963955425,"aspectRatio":1.5242133042669057,"axis":"xy","lump":0,"count":86.69999999999997,"freq":3.785997393314164,"isDial":false,"isLineart":false,"isRing":true,"isSpiral":false,"isBalls":false,"isMatrix":false,"left":0,"kaleids":6.5899999999999785,"mouseX":0.44849537037037035,"mouseY":0.6764112903225806,"noise":0,"scale":0.31138875555600487,"top":0,"twirl":2.2,"twist":0.30000000000000016,"velocity":0.17799999999999927,"shape":"rect"}},{"slug":"bringing-your-stripe-objects-to-life-with-workbench","title":"Bringing your Stripe objects to life with Workbench","summary":"This post shows how to use the Stripe Workbench Inspector to examine the lifecycle of a PaymentIntent object.","authors":["Ben Smith"],"date":"2024-08-29","type":"Blog","topics":["Workbench","Payment Intents"],"artConfig":{"ampX":1.720000000000003,"ampY":1,"aspectRatio":1,"axis":"x","lump":0,"count":25,"freq":1,"isDial":false,"isLineart":false,"isRing":false,"isSpiral":false,"isBalls":true,"isMatrix":true,"left":-120,"mouseX":0.5422453703703703,"mouseY":0.5581668625146886,"noise":3.2309999999999084,"scale":1.323999999999992,"top":-50,"twirl":0.06299999999999983,"twist":15.419999999999984,"velocity":1,"shape":"ellipse"}}]},"authors":[{"name":"David Edoh-Bedi","slug":"david-edoh-bedi","profile":"After starting his Stripe journey as an integration engineer helping large users build and scale their payment solutions, David pivoted to his current developer advocate role. He began his professional career as an engineer at Microsoft, working on various aspects of the Windows operating system. He’s passionate about all things data and connecting with developers from around the world. Outside of tech, he’s a huge soccer fan, avid reader, travel addict, and amateur triathlete.","posts":[{"slug":"testing-connect-onboarding-with-sandboxes","authorBio":"","title":"Testing Connect onboarding with Sandboxes","summary":"As a platform, you can accelerate your Connect development with Sandboxes, by replicating your live settings to test out the merchant onboarding flow.","authors":["David Edoh-Bedi"],"date":"2024-12-19","type":"Blog","topics":["Connect","Sandboxes"],"artConfig":{"ampX":0.24321052757950756,"ampY":0.21234603378855432,"aspectRatio":1.891098642361734,"axis":"x","lump":-0.2663789659738541,"count":130,"freq":3.0281107682703468,"isDial":false,"isLineart":false,"isRing":false,"isSpiral":false,"isBalls":false,"isMatrix":false,"left":50,"kaleids":6.605468751812275,"mouseX":0.9577546296296297,"mouseY":0.90625,"noise":0.6708555158071439,"scale":0.7786845318092911,"top":2,"twirl":0.005405418018509103,"twist":5.116850969437312,"velocity":1,"shape":"line"}},{"slug":"crush-errors-with-sandbox-testing","authorBio":"","title":"Crush errors with Sandbox testing","summary":"With Sandboxes, you can reproduce and troubleshoot errors in your integration without impacting live transactions.","authors":["David Edoh-Bedi"],"date":"2024-12-19","type":"Blog","topics":["Sandboxes"],"artConfig":{"ampX":1.6155547739194231,"ampY":0.16105222953795506,"aspectRatio":4.846182045765707,"axis":"xy","lump":0.012257571935580414,"count":20,"freq":3.0367582350683,"isDial":false,"isLineart":false,"isRing":false,"isSpiral":false,"left":0,"mouseX":0.5011574074074074,"mouseY":0.482962962962963,"noise":0,"scale":3.7,"top":0,"twirl":0.1,"twist":10.44243260386455,"velocity":1,"shape":"rect"}},{"slug":"peeking-under-the-hood-of-stripe-invoicing","authorBio":"","title":"Peeking under the hood of Stripe Invoicing","summary":"Stripe Invoicing offers a no-code solution for sending invoices to customers. Because this option handles the complexity of all underlying API calls, developers sometimes struggle to understand the different phases a Stripe invoice goes through, which is problematic when attempting to debug payment failures. ","authors":["David Edoh-Bedi"],"date":"2024-08-26","type":"Blog","topics":["Workbench","Invoicing"],"artConfig":{"ampX":2.291128437063488,"ampY":2.0936337963955425,"aspectRatio":1.5242133042669057,"axis":"xy","lump":0,"count":86.69999999999997,"freq":3.785997393314164,"isDial":false,"isLineart":false,"isRing":true,"isSpiral":false,"isBalls":false,"isMatrix":false,"left":0,"kaleids":6.5899999999999785,"mouseX":0.44849537037037035,"mouseY":0.6764112903225806,"noise":0,"scale":0.31138875555600487,"top":0,"twirl":2.2,"twist":0.30000000000000016,"velocity":0.17799999999999927,"shape":"rect"}}]}],"estimatedReadingTime":"4 min read"},"__N_SSG":true}