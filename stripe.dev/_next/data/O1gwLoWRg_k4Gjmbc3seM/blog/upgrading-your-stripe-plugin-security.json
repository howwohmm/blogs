{"pageProps":{"postData":{"slug":"upgrading-your-stripe-plugin-security","title":"Upgrading your Stripe plugin security","summary":"Secure your Stripe integrations by ditching unrestricted secret keys—learn how to protect merchant accounts with restricted access API keys and OAuth 2.0, and avoid compliance fees.","authors":["Ben Smith"],"date":"2024-09-19","type":"Blog","topics":["Stripe Apps"],"artConfig":{"ampX":0.24321052757950756,"ampY":0.21234603378855432,"aspectRatio":1.891098642361734,"axis":"x","lump":-0.2663789659738541,"count":130,"freq":3.0281107682703468,"isDial":false,"isLineart":false,"isRing":false,"isSpiral":false,"isBalls":false,"isMatrix":false,"left":50,"kaleids":6.605468751812275,"mouseX":0.9577546296296297,"mouseY":0.90625,"noise":0.6708555158071439,"scale":0.7786845318092911,"top":2,"twirl":0.005405418018509103,"twist":5.116850969437312,"velocity":1,"shape":"line"},"content":"In online commerce, security is paramount. As a developer building integrations with Stripe, it’s critical to continuously implement the latest security practices. Earlier this year, Stripe introduced two new authentication methods, [restricted API keys (RAK)](https://docs.stripe.com/stripe-apps/api-authentication/rak?) and [OAuth 2.0](https://docs.stripe.com/stripe-apps/api-authentication/oauth?) to help developers create more secure integrations. This post guides you on how to implement these methods in your Stripe plugins and explains why moving away from traditional unrestricted secret API keys is not just recommended, but necessary.\n\n## What is a Stripe plugin?\n\nA Stripe plugin is a component that integrates with the Stripe API to facilitate payment processing, subscription management, and other financial transactions. These plugins are often built to work with third-party platforms, such as CRMs or CMSs, and are consumed by merchants using these platforms. \n\nPlugins typically require API keys to authenticate requests to the Stripe API, allowing the plugin to perform actions such as processing payments, retrieving customer data, and managing subscriptions. API keys are popular because they offer a straightforward way to establish a connection between the plugin and the Stripe API, enabling seamless transactions without requiring extensive setup. \n\nMany plugins require the merchant user to manually copy their Stripe unrestricted secret API key onto the third-party platform to authenticate the plugin with their Stripe account. This introduces significant risk because these secret API keys grant full access to the merchant's Stripe account. If the key is mishandled, exposed, or compromised, it could lead to unauthorized transactions, data breaches, and potentially catastrophic financial losses. This level of access makes unrestricted secret API keys a prime target for attackers, and their widespread use in plugins, without sufficient safeguards, can expose merchants to unnecessary risks. \n\nTo mitigate these risks, Stripe introduced restricted API keys (RAK) and OAuth 2.0. These methods offer more granular control over the permissions granted to third parties, significantly enhancing security by moving from a castle and moat security model to a zero trust.\n\n![](/images/upgrading-your-stripe-plugin-security/castle_moat_v2.png)\n\nThe traditional castle and moat security model, illustrated by full access API key usage, relies on perimeter defense, wherein the moat (the API key) protects the castle (the account). This approach assumes that anyone within the moat is trustworthy; however, if bad actors gain access to the API key, they can navigate the account freely, exposing it to significant vulnerabilities. \n\nIn contrast, the zero trust security model, exemplified by RAK and OAuth 2.0, operates on the principle that no user or system should be trusted by default, regardless of their location. Access is granted based on strict identity verification and least privilege permissions, meaning that even if third parties integrate with the system, they are limited to the specific data and actions authorized for them. This paradigm shift not only enhances security by minimizing exposure, but also significantly reduces the risk of unauthorized access, making it essential for developers to adopt RAK and OAuth for safer integrations.\n\nHere are two options for implementing a zero trust model in your Stripe plugins:\n\n1. **Restricted API keys (RAK)** exemplify this evolution in security. They enforce the principle of least privilege, allowing developers to define specific permissions for their plugins. This means a plugin can only access the data and perform actions that are absolutely necessary. For instance, if your plugin only requires the ability to view customer data, you can create a RAK with read-only access, effectively minimizing the risk of unauthorized actions and data breaches.  \n     \n2. **OAuth 2.0** further enhances this security model by enabling tokenized, one-click authorization. Instead of requiring the sharing of a secret key, merchants can authorize plugins through Stripe’s OAuth interface, which issues a token with precisely the necessary permissions. This not only streamlines the authentication process, but it also empowers merchants to revoke access easily if needed, all without compromising their entire account. \n\nTogether, RAK and OAuth provide a robust framework for securing integrations while ensuring that user controls remain paramount.\n\n## Updating existing plugins\n\nIf you have pre-existing plugins using a full access Stripe API Key, you have several options to update. Here’s a brief overview of the approaches:\n\n ### 1. Turn your plugin into a Stripe App\n\n   Converting your plugin into a [Stripe App](https://docs.stripe.com/stripe-apps) is an excellent way to use Stripe’s built-in tools for secure and seamless integration. Stripe Apps offer a streamlined setup process, enhanced security features, and the ability to display relevant user interfaces directly in the Stripe Dashboard. This option is ideal for developers looking to provide a more integrated experience for merchants. \n\n   Stripe App authentication with RAK  \n   \n\n![](/images/upgrading-your-stripe-plugin-security/2.png)\n\nStripe App authentication with OAuth  \n\n![](/images/upgrading-your-stripe-plugin-security/3.png)\n\nCheck Stripe Documentation for a comprehensive guide on how to [migrate your plugin to a Stripe App](https://docs.stripe.com/stripe-apps/plugins/decide-migration).\n\n\n ### 2. Use Stripe Connect\n\n   [Stripe Connect](https://stripe.com/connect) is designed for platforms that need to facilitate payments between third-party users. By upgrading your plugin to use Stripe Connect, you can take advantage of its secure onboarding process, robust payment features, and automated compliance management. This option is particularly useful for platforms that operate as marketplaces or need to manage multiple accounts under a single integration. Check Stripe Documentation to learn how to migrate your [plugin to Stripe Connect](https://docs.stripe.com/stripe-apps/plugins/decide-migration#migrate-to-connect).\n\n### 3. Manual setup of restricted API keys (RAK)\n\n   If you prefer to maintain a more hands-on approach, manually setting up restricted API keys (RAK) allows you to define specific permissions for your plugin without converting it into a full Stripe App or using Stripe Connect. This method gives you complete control over the scope of access your plugin has, ensuring that it operates securely within the limits you set. Check Stripe Documentation to learn how to [migrate your plugin to a manual RAK](https://docs.stripe.com/keys#limit-access).\n\nEach of these options offers a path to modernizing your Stripe plugins, enhancing security, and ensuring compliance with [Stripe’s upcoming requirements](https://support.stripe.com/questions/plugin-user-migration-guide). \n\n## The cost of non-compliance\n\nStarting on October 29, 2024, Stripe will require all merchants using plugins to authenticate via restricted API keys or OAuth 2.0. This mandate is part of Stripe's ongoing efforts to enhance security across its platform. If you haven’t updated your plugins by June 2025, Stripe may begin charging a fee to those merchants who are still using traditional full access API keys.\n\n## Summary\n\nSecuring your Stripe plugin is essential to protecting merchant accounts from unauthorized access and data breaches. Traditional full access API keys, while common, present significant risks as they grant full access to a merchant’s Stripe account. If mishandled, they can lead to severe security issues.\n\nTo combat these vulnerabilities, Stripe introduced restricted API keys (RAK) and OAuth 2.0. These methods offer more secure ways to authenticate third-party integrations. RAKs allow developers to define specific permissions, limiting access to only the necessary data and actions. OAuth 2.0 enhances security further by providing granular access control, tokenized, one-click authorization, giving merchants greater control over their integrations.\n\nStripe will mandate the use of RAK or OAuth 2.0 for all plugins starting October 29, 2024\\. Merchants must ensure that their plugins are updated by June 2025 to avoid potential compliance fees and adhere to Stripe’s latest security standards.\n\nBy adopting RAK or OAuth 2.0, you significantly reduce the risk of unauthorized access and enhance the security of your integrations. Upgrading your Stripe plugins is not just about compliance, it’s about safeguarding your clients’ data and maintaining the integrity of their financial transactions. \n\nRefer to the documentation for more information on [migrating your plugin to Stripe Apps or Stripe Connect](https://docs.stripe.com/stripe-apps/plugins/decide-migration).","authorBio":"","additionalResources":[{"title":"Subscribe to Stripe Developers on YouTube.","url":"https://www.youtube.com/stripedevelopers\""},{"title":"Follow us at @Stripedev on twitter for updates and answers to your developer questions.","url":"https://twitter.com/stripedev"},{"title":"Sign up for the Developer Digest.","url":"https://go.stripe.global/dev-digest"},{"title":"Join the Stripe Discord server to chat live with other developers.","url":"https://discord.com/invite/RuJnSBXrQn"},{"title":"Join Stripe Insiders to try the latest features and provide direct feedback to the teams that build them.","url":"https://insiders.stripe.dev"}],"relatedArticles":[{"slug":"simple-error-handling-strategies-with-stripe-workbench","title":"Simple error handling strategies with Stripe Workbench","summary":"With Workbench, developers now have a bird’s-eye view of their integration which shows many potential issues in one place. This makes it easier to see the impact of each incident, see how often it’s happening, and receive actionable advice for resolving the issue.","authors":["Ben Smith"],"date":"2024-09-02","type":"Blog","topics":["Workbench","Error Handling"],"artConfig":{"ampX":0.24321052757950756,"ampY":0.21234603378855432,"aspectRatio":2.4639999999999973,"axis":"x","lump":1.7489999999999981,"count":116.19999999999999,"freq":0.8651107682703485,"isDial":false,"isLineart":false,"isRing":false,"isSpiral":false,"isBalls":false,"isMatrix":false,"left":0,"kaleids":8,"mouseX":0.9,"mouseY":0.8729838709677419,"noise":0,"scale":0.2736845318092905,"top":-58,"twirl":0.2,"twist":8.16200000000005,"velocity":2,"shape":"ellipse"}},{"slug":"bringing-your-stripe-objects-to-life-with-workbench","title":"Bringing your Stripe objects to life with Workbench","summary":"This post shows how to use the Stripe Workbench Inspector to examine the lifecycle of a PaymentIntent object.","authors":["Ben Smith"],"date":"2024-08-29","type":"Blog","topics":["Workbench","Payment Intents"],"artConfig":{"ampX":1.720000000000003,"ampY":1,"aspectRatio":1,"axis":"x","lump":0,"count":25,"freq":1,"isDial":false,"isLineart":false,"isRing":false,"isSpiral":false,"isBalls":true,"isMatrix":true,"left":-120,"mouseX":0.5422453703703703,"mouseY":0.5581668625146886,"noise":3.2309999999999084,"scale":1.323999999999992,"top":-50,"twirl":0.06299999999999983,"twist":15.419999999999984,"velocity":1,"shape":"ellipse"}}]},"authors":[{"name":"Ben Smith","slug":"ben-smith","profile":"Ben is a Staff Developer Advocate at Stripe, based in the UK. Previously, he was a Principal Developer Advocate at AWS, specializing in serverless architecture. With a background in web development, he is passionate about empowering developers through knowledge sharing and community engagement, making complex technologies accessible to all.","posts":[{"slug":"how-do-i-store-inventory-data-in-my-stripe-application","authorBio":"","title":"How do I store inventory data in my Stripe application","summary":"Explore the critical importance of managing real-time inventory updates for both online marketplaces and physical stores. This blog post details the development of an event-driven architecture designed to synchronize inventory levels with Stripe payment events using AWS cloud services. The demonstration centers around the DevRel Swag Store, showcasing a practical application used at the GOTO Chicago event, which integrates serverless technologies like Amazon DynamoDB, AWS Lambda, and IoT Core for efficient inventory management. Learn about the challenges of using Stripe metadata for inventory, and discover robust solutions for handling race conditions and implementing dynamic inventory checks. Additionally, understand the trade-offs between using Stripe Payment Links and custom payment processes for real-time stock validation.","authors":["Ben Smith"],"date":"2024-12-16","type":"Blog","topics":["Event Destinations","AWS"],"artConfig":{"ampX":0.24321052757950756,"ampY":0.21234603378855432,"aspectRatio":1.891098642361734,"axis":"x","lump":-0.2663789659738541,"count":130,"freq":3.0281107682703468,"isDial":false,"isLineart":false,"isRing":false,"isSpiral":false,"isBalls":false,"isMatrix":false,"left":50,"kaleids":6.605468751812275,"mouseX":0.9577546296296297,"mouseY":0.90625,"noise":0.6708555158071439,"scale":0.7786845318092911,"top":2,"twirl":0.005405418018509103,"twist":5.116850969437312,"velocity":1,"shape":"line"}},{"slug":"data-access-patterns-for-simple-stripe-Integrations","authorBio":"","title":"Data access patterns for simple Stripe Integrations","summary":"Is your Stripe integration ready to scale with your application? In this blog post, explore smart data strategies to enhance performance and security. Learn how to leverage Stripe/'s features, secure web backends, and serverless functions for efficient data management. Discover when to integrate a global CDN and use a separate database for deeper data control, ensuring a seamless user experience.","authors":["Ben Smith"],"date":"2024-11-27","type":"Blog","topics":["Event Destinations","AWS","Serverless"],"artConfig":{"ampX":0.24321052757950756,"ampY":0.21234603378855432,"aspectRatio":1.891098642361734,"axis":"x","lump":-0.2663789659738541,"count":130,"freq":3.0281107682703468,"isDial":false,"isLineart":false,"isRing":false,"isSpiral":false,"isBalls":false,"isMatrix":false,"left":50,"kaleids":6.605468751812275,"mouseX":0.9577546296296297,"mouseY":0.90625,"noise":0.6708555158071439,"scale":0.7786845318092911,"top":2,"twirl":0.005405418018509103,"twist":5.116850969437312,"velocity":1,"shape":"line"}},{"slug":"growing-your-stripe-integration-with-event-destinations","authorBio":"","title":"Growing Your Stripe Integration With Event Destinations","summary":"Event Destinations has begun rolling out to general availability as of 10/30 and will soon be enabled for all accounts. This post explores how to use Stripe Event Destinations and Amazon EventBridge to achieve near infinite customization possibilities for your payment solutions without disrupting your existing integrations.","authors":["Ben Smith"],"date":"2024-10-31","type":"Blog","topics":["Event Destinations","AWS"],"artConfig":{"ampX":0.24321052757950756,"ampY":0.21234603378855432,"aspectRatio":1.891098642361734,"axis":"x","lump":-0.2663789659738541,"count":130,"freq":3.0281107682703468,"isDial":false,"isLineart":false,"isRing":false,"isSpiral":false,"isBalls":false,"isMatrix":false,"left":50,"kaleids":6.605468751812275,"mouseX":0.9577546296296297,"mouseY":0.90625,"noise":0.6708555158071439,"scale":0.7786845318092911,"top":2,"twirl":0.005405418018509103,"twist":5.116850969437312,"velocity":1,"shape":"line"}},{"slug":"choosing-the-right-sandbox-strategy-for-your-organization","authorBio":"","title":"Choosing the right sandbox strategy for your organization","summary":"Stripe Sandboxes offer a powerful solution for isolating testing environments, but how you implement them can make all the difference. Pick a sandbox strategy that best suits your organizations development approach and team size.","authors":["Ben Smith"],"date":"2024-09-26","type":"Blog","topics":["Sandboxes"],"artConfig":{"ampX":1.367128437063478,"ampY":2.0936337963955425,"aspectRatio":1.5242133042669057,"axis":"xy","lump":0.9123757707981675,"count":88.60000000000001,"freq":3.785997393314164,"isDial":false,"isLineart":true,"isRing":true,"isSpiral":false,"left":-80,"mouseX":0.5121527777777778,"mouseY":0.4894613583138173,"noise":0,"scale":2.294388755555997,"top":150,"twirl":0.006193707110889813,"twist":1.3885165542029452,"velocity":1,"shape":"rect"}},{"slug":"avoiding-test-mode-tangles-with-stripe-sandboxes","authorBio":"","title":"Avoiding test mode tangles with Stripe Sandboxes","summary":"Discover how to create independent testing environments with Stripe Sandboxes, streamline your development through GitHub automation, and prioritize the security of your API keys to enhance your payment integration process.","authors":["Ben Smith"],"date":"2024-09-16","type":"Blog","topics":["Sandboxes"],"artConfig":{"ampX":1.1642105275795096,"ampY":0.21234603378855432,"aspectRatio":1.791098642361734,"axis":"y","lump":0.7446210340261474,"count":109.99999999999999,"freq":3.0281107682703468,"isDial":false,"isLineart":false,"isRing":false,"isSpiral":false,"isBalls":false,"isMatrix":false,"left":0,"kaleids":2.5900000000000083,"mouseX":0.6134259259259259,"mouseY":0.7247983870967742,"noise":0,"scale":1.1986845318092938,"top":2,"twirl":0.005405418018509103,"twist":4.438000000000008,"velocity":0.5109999999999996,"shape":"ellipse"}},{"slug":"advanced-error-handling-patterns-for-Stripe-enterprise-developers","authorBio":"","title":"Advanced error handling patterns for Stripe enterprise developers","summary":"This post demonstrates some more advanced patterns to help you build resilient and robust payment systems to integrate Stripe with your enterprise applications. As your integration grows in complexity and volume, these patterns become crucial for maintaining system stability and providing a smooth user experience.","authors":["Ben Smith"],"date":"2024-09-03","type":"Blog","topics":["Workbench","Error Handling"],"artConfig":{"ampX":0.24321052757950756,"ampY":0.21234603378855432,"aspectRatio":1.891098642361734,"axis":"x","lump":-0.2663789659738541,"count":130,"freq":3.0281107682703468,"isDial":false,"isLineart":false,"isRing":false,"isSpiral":false,"isBalls":false,"isMatrix":false,"left":50,"kaleids":6.605468751812275,"mouseX":0.9577546296296297,"mouseY":0.90625,"noise":0.6708555158071439,"scale":0.7786845318092911,"top":2,"twirl":0.005405418018509103,"twist":5.116850969437312,"velocity":1,"shape":"line"}},{"slug":"simple-error-handling-strategies-with-stripe-workbench","authorBio":"","title":"Simple error handling strategies with Stripe Workbench","summary":"With Workbench, developers now have a bird’s-eye view of their integration which shows many potential issues in one place. This makes it easier to see the impact of each incident, see how often it’s happening, and receive actionable advice for resolving the issue.","authors":["Ben Smith"],"date":"2024-09-02","type":"Blog","topics":["Workbench","Error Handling"],"artConfig":{"ampX":0.24321052757950756,"ampY":0.21234603378855432,"aspectRatio":2.4639999999999973,"axis":"x","lump":1.7489999999999981,"count":116.19999999999999,"freq":0.8651107682703485,"isDial":false,"isLineart":false,"isRing":false,"isSpiral":false,"isBalls":false,"isMatrix":false,"left":0,"kaleids":8,"mouseX":0.9,"mouseY":0.8729838709677419,"noise":0,"scale":0.2736845318092905,"top":-58,"twirl":0.2,"twist":8.16200000000005,"velocity":2,"shape":"ellipse"}},{"slug":"bringing-your-stripe-objects-to-life-with-workbench","authorBio":"","title":"Bringing your Stripe objects to life with Workbench","summary":"This post shows how to use the Stripe Workbench Inspector to examine the lifecycle of a PaymentIntent object.","authors":["Ben Smith"],"date":"2024-08-29","type":"Blog","topics":["Workbench","Payment Intents"],"artConfig":{"ampX":1.720000000000003,"ampY":1,"aspectRatio":1,"axis":"x","lump":0,"count":25,"freq":1,"isDial":false,"isLineart":false,"isRing":false,"isSpiral":false,"isBalls":true,"isMatrix":true,"left":-120,"mouseX":0.5422453703703703,"mouseY":0.5581668625146886,"noise":3.2309999999999084,"scale":1.323999999999992,"top":-50,"twirl":0.06299999999999983,"twist":15.419999999999984,"velocity":1,"shape":"ellipse"}}]}],"estimatedReadingTime":"4 min read"},"__N_SSG":true}