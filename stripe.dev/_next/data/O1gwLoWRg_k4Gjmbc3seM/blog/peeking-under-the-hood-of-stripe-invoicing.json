{"pageProps":{"postData":{"slug":"peeking-under-the-hood-of-stripe-invoicing","title":"Peeking under the hood of Stripe Invoicing","summary":"Stripe Invoicing offers a no-code solution for sending invoices to customers. Because this option handles the complexity of all underlying API calls, developers sometimes struggle to understand the different phases a Stripe invoice goes through, which is problematic when attempting to debug payment failures. ","authors":["David Edoh-Bedi"],"date":"2024-08-26","type":"Blog","topics":["Workbench","Invoicing"],"artConfig":{"ampX":2.291128437063488,"ampY":2.0936337963955425,"aspectRatio":1.5242133042669057,"axis":"xy","lump":0,"count":86.69999999999997,"freq":3.785997393314164,"isDial":false,"isLineart":false,"isRing":true,"isSpiral":false,"isBalls":false,"isMatrix":false,"left":0,"kaleids":6.5899999999999785,"mouseX":0.44849537037037035,"mouseY":0.6764112903225806,"noise":0,"scale":0.31138875555600487,"top":0,"twirl":2.2,"twist":0.30000000000000016,"velocity":0.17799999999999927,"shape":"rect"},"content":"\n\n\n[Stripe Invoicing](https://docs.stripe.com/no-code/invoices) offers a no-code solution for sending invoices to customers. Because this option handles the complexity of all underlying API calls, developers sometimes struggle to understand the different phases a Stripe invoice goes through, which is problematic when attempting to debug payment failures. \n\nThis post uses the new [Stripe Workbench](https://docs.stripe.com/workbench) debugging tool to analyze what happens behind the scenes as an Invoice goes through its lifecycle. \n\n### What is Workbench?\n\n[Workbench](https://docs.stripe.com/workbench) is a context-aware tool that allows you to build and debug your Stripe integrations from anywhere in the Dashboard. In response to feedback from Stripe developers, this new feature centralizes previously disparate developer tooling into one central and constantly accessible location. Among other things, you can use Workbench to inspect API objects and run requests on them using the [built-in Shell](https://docs.stripe.com/workbench/shell).\n\nTo get started, navigate to the [Workbench](https://dashboard.stripe.com/workbench) page in your dashboard and turn the feature on.\n\n### Invoice creation in the dashboard\n\nNavigate to the **Invoices** tab in the dashboard and click on the **Create test invoice** option in the upper right corner. You’re then presented with the Invoice creation wizard, where you can populate all the relevant fields for your invoice. Specifically, make sure to add values for **Customer** and **Items** (from your [product catalog](https://docs.stripe.com/products-prices/getting-started#create-products-prices)). \n\nMake sure to have Workbench viewable so you can observe the underlying API calls. \n\n![](/images/invoice-peek/peek-1.png)\n\n![](/images/invoice-peek/peek-2.png)\n\nExit the wizard by clicking the **X** in the upper left corner. At this point, your invoice is saved in a draft state.\n\nNow take a look at the data map in the **Inspector** tab of Workbench. This shows you the JSON representation of all the objects created so far, and their hierarchy. Notably:\n\n* The Invoice is the top level object. It has a two associated objects: \n * Customer - the individual making the transaction \n * Invoice item - the item being purchased\n\n The Invoice object itself comprises numerous fields, like `status` which tells you what phase it is currently in. This status is initially set to `draft`. \n\n* A Price object with an associated Product. This is a standalone object and not a direct child of the Invoice, which makes sense as products have a one to many relationship with invoices. \n\n![](/images/invoice-peek/peek-3.png)\n\nNext, switch to the **Logs** tab. This tab shows the recent API calls that have been made in your integration. In this example, there are two calls: one for Invoice creation and another for the Invoice Item creation. \n\n![](/images/invoice-peek/peek-4.png)\n\nLastly, look at the **Events** tab to see which ones get fired as part of the invoice creation process. \n\n![](/images/invoice-peek/peek-5.png)\n\nThe [invoice.created](https://docs.stripe.com/api/invoices/create) and [invoiceitem.created](https://docs.stripe.com/api/invoiceitems/create) events align with what you see in the **Logs** tabs, namely the fact that an Invoice was created and an Invoice Item added to it. \n\nThere’s also an `invoice.updated` event that’s worth analyzing further. One way to do that is to look at the `previous_attributes` section at the bottom of the Event JSON. This shows you what attributes changed from the previous variation of the Invoice object, leading to the `invoice.updated` event being fired. The lines attribute seems particularly interesting for a further look. \n\n![](/images/invoice-peek/peek-6.png)\n\nIn the same JSON for the `invoice.updated` event, look at the updated lines attribute. It shows that the Invoice Item was added as expected, but there’s also a new [Invoice Line Item](https://docs.stripe.com/api/invoices/line_item) object. This is a nested resource automatically generated by Stripe to represent the individual line items in the invoice. It cannot be created directly through the API. \n\n![](/images/invoice-peek/peek-7.png)\n\nTo recap, for Invoices created in the dashboard:\n\n1. An underlying Invoice object is created, via a call to the `v1/invoices` endpoint. It starts in a `draft` status. This process fires an `invoice.created` event.  \n2. An Invoice Item is created separately, via the `v1/invoiceitems` endpoint, and appended to the Invoice. This process fires an `invoiceitem.created` event, followed by an `invoice.updated` event.  \n3. There’s an underlying Invoice Line Item object automatically generated by the API\n\nWith the invoice is created, what happens next?\n\n### Sending the invoice to your customer\n\nNavigate back to the previously created invoice in your dashboard, and click the **Send invoice** button to simulate sending it to your customer.\n\n![](/images/invoice-peek/peek-8.png)\n\n![](/images/invoice-peek/peek-9.png)\n\nCheck back to the data map in the **Inspector** tab of Workbench. There’s a new object in the Invoice hierarchy: a [Payment Intent](https://docs.stripe.com/api/payment_intents). This object is at the core of Stripe’s payment API. It’s a [state machine](https://en.wikipedia.org/wiki/Finite-state_machine) which transitions through different phases over the course of the payment process.\n\n![](/images/invoice-peek/peek-10.png)\n\nSwitching over to the **Events** tab, you see the events that are fired as part of sending the invoice. \n\n![](/images/invoice-peek/peek-10a.png)\n\nOne way to analyze `invoice.updated` events is to look at the `previous_attributes` section. In this case, the `status` is included here, which means its value is updated as part of this event.\n\n![](/images/invoice-peek/peek-11.png)\n\nThe value of the `status` attribute in the Event JSON has changed to `open`.\n\n![](/images/invoice-peek/peek-12.png)\n\nAnother noteworthy event is `invoice.finalized`. The event description indicates that finalizing is an operation on draft invoices. This changes the invoice’s status to `open`, meaning it’s ready for payment.\n\n![](/images/invoice-peek/peek-13.png)\n\nWhen an invoice is sent to the customer:\n\n* A Payment Intent object is created, indicating that you’re ready to collect a payment. \n* The Invoice is finalized and its status changes from `draft` to `open`.\n\nNow you can simulate collecting payment from the customer.\n\n### Charging the customer\n\nNavigate once again to the previously created invoice in your dashboard, and click the **Charge customer** button.\n\n![](/images/invoice-peek/peek-14.png)\n\nIn the resulting pop-up window, you see a message about the invoice not being editable after payment attempts. This is important to note, as it signifies that whatever state the invoice ends up in after this process is terminal. \n\n![](/images/invoice-peek/peek-15.png)\n\nProceed with charging the customer and switch back to the Inspector. There is another new object in the data map: a [Charge](https://docs.stripe.com/api/charges). This represents an atomic charge operation and is created as part of the Payment Intent flow.\n\n![](/images/invoice-peek/peek-16.png)\n\nSwitching to the **Logs** tab, there was a call to the Pay endpoint, as expected.\n\n![](/images/invoice-peek/peek-17.png)\n\nThe **Events** tab shows various activities. The `payment_intent.` and `charge.` events confirm what you see in the **Logs** and **Inspector** tabs. Take a closer look at the `invoice.updated` event specifically.\n\n![](/images/invoice-peek/peek-18.png)\n\nOnce again, the `status` shows up in the `previous_attributes` hash, which means it changed as part of this event.\n![](/images/invoice-peek/peek-19.png)\n\nThe updated status is `paid`, which aligns with the `invoice.payment_succeeded` event that is fired.\n\n![](/images/invoice-peek/peek-20.png)\n\nAs part of the invoice payment process:\n\n* The Payment Intent is captured - which creates a charge \n* The invoice transitions from `open” to “paid”\n\n### Canceling an invoice\n\nThere are two cases to consider here: an invoice has not been sent to the customer, or an invoice has already been sent.\n\n1. Invoice has not been sent to the customer\n\nTo simulate this, create a new invoice using the wizard. Exit out of the wizard to keep the invoice in draft state. Make sure you can see the invoice in the Inspector.\n\nIn the invoices page of the dashboard, click on the **ellipsis** and select the **delete draft invoice** option in the dropdown.\n\n![](/images/invoice-peek/peek-22.png)\n\nYou are presented with a message about this action being irreversible, so this is a terminal state for the invoice, meaning that it cannot be further modified. \n\n![](/images/invoice-peek/peek-23.png)\n\nYou can confirm with Workbench that the invoice record is gone from Stripe and is no longer accessible.\n\n![](/images/invoice-peek/peek-24.png)\n\n2. Invoice has been sent to the customer\n\nTo simulate this, create an invoice using the wizard and send it to the customer, as previously shown. Then, find the invoice in the dashboard and choose the **Change invoice status** under the ellipsis in the right hand corner. \n\n![](/images/invoice-peek/peek-25.png)\n\nHere, additional statuses can potentially apply to invoices. Choose the **Void** status in the list and click on **Update status**. \n\n![](/images/invoice-peek/peek-26.png)\n\nThe **Logs** tab confirms a call to the `/invoices/void` endpoint.\n\n![](/images/invoice-peek/peek-27.png)\n\nThere are a few events triggered as part of this process:\n\n* The previously created Payment Intent gets canceled (`payment_intent.canceled` event), given that you no longer want to collect a payment on this invoice. \n* There’s an `invoice.voided` event corresponding to the `/invoices/void` call.\n\n![](/images/invoice-peek/peek-28.png)\n\nIn the `invoice.updated` event details, the status once again changes. It was previously set to `open`: \n\n![](/images/invoice-peek/peek-29.png)\n\nAfter the void operation, the invoice status changes to `void`:\n\n![](/images/invoice-peek/peek-30.png)\n\nTo recap, there are two ways of canceling invoices:\n\n1. By deleting an invoice that’s in `draft` status. This deletes the invoice record from Stripe. \n2. By voiding an invoice that’s in `open` status. This option preserves the invoice record, so you can use it for bookkeeping as needed. \n\n### Wrapping up\n\nUsing the various tools in Workbench, you can analyze any object in the Stripe dashboard and map out its hierarchy and observe its different state changes through the payment lifecycle. The approach you followed here with Invoices can be replicated to other parts of the Stripe API.","authorBio":"","additionalResources":[{"title":"Subscribe to Stripe Developers on YouTube.","url":"https://www.youtube.com/stripedevelopers\""},{"title":"Follow us at @Stripedev on twitter for updates and answers to your developer questions.","url":"https://twitter.com/stripedev"},{"title":"Sign up for the Developer Digest.","url":"https://go.stripe.global/dev-digest"},{"title":"Join the Stripe Discord server to chat live with other developers.","url":"https://discord.com/invite/RuJnSBXrQn"},{"title":"Join Stripe Insiders to try the latest features and provide direct feedback to the teams that build them.","url":"https://insiders.stripe.dev"}],"relatedArticles":[{"slug":"debugging-your-stripe-invoicing-integration-with-workbench","title":"Debugging your Stripe Invoicing integration with Workbench","summary":"With Stripe Invoicing, you can create and manage invoices for one-time and recurring payments. Whether caused by infrastructure issues or coding bugs, integration failures do sometimes happen, which can prevent invoices from being paid in a timely manner.","authors":["David Edoh-Bedi"],"date":"2024-08-29","type":"Blog","topics":["Workbench","Invoicing"],"artConfig":{"ampX":1.8364052695935116,"ampY":0.7713401032732738,"aspectRatio":1.7238093835504644,"axis":"y","lump":0.9759304509066895,"count":91.4999999999999,"freq":5.2168324480928945,"isDial":false,"isLineart":false,"isRing":false,"isSpiral":false,"left":0,"mouseX":0.5023148148148148,"mouseY":0.06828528072837632,"noise":0,"scale":3.054,"top":100,"twirl":0.1,"twist":51.61800000000121,"velocity":1,"shape":"rect"}},{"slug":"bringing-your-stripe-objects-to-life-with-workbench","title":"Bringing your Stripe objects to life with Workbench","summary":"This post shows how to use the Stripe Workbench Inspector to examine the lifecycle of a PaymentIntent object.","authors":["Ben Smith"],"date":"2024-08-29","type":"Blog","topics":["Workbench","Payment Intents"],"artConfig":{"ampX":1.720000000000003,"ampY":1,"aspectRatio":1,"axis":"x","lump":0,"count":25,"freq":1,"isDial":false,"isLineart":false,"isRing":false,"isSpiral":false,"isBalls":true,"isMatrix":true,"left":-120,"mouseX":0.5422453703703703,"mouseY":0.5581668625146886,"noise":3.2309999999999084,"scale":1.323999999999992,"top":-50,"twirl":0.06299999999999983,"twist":15.419999999999984,"velocity":1,"shape":"ellipse"}}]},"authors":[{"name":"David Edoh-Bedi","slug":"david-edoh-bedi","profile":"After starting his Stripe journey as an integration engineer helping large users build and scale their payment solutions, David pivoted to his current developer advocate role. He began his professional career as an engineer at Microsoft, working on various aspects of the Windows operating system. He’s passionate about all things data and connecting with developers from around the world. Outside of tech, he’s a huge soccer fan, avid reader, travel addict, and amateur triathlete.","posts":[{"slug":"testing-connect-onboarding-with-sandboxes","authorBio":"","title":"Testing Connect onboarding with Sandboxes","summary":"As a platform, you can accelerate your Connect development with Sandboxes, by replicating your live settings to test out the merchant onboarding flow.","authors":["David Edoh-Bedi"],"date":"2024-12-19","type":"Blog","topics":["Connect","Sandboxes"],"artConfig":{"ampX":0.24321052757950756,"ampY":0.21234603378855432,"aspectRatio":1.891098642361734,"axis":"x","lump":-0.2663789659738541,"count":130,"freq":3.0281107682703468,"isDial":false,"isLineart":false,"isRing":false,"isSpiral":false,"isBalls":false,"isMatrix":false,"left":50,"kaleids":6.605468751812275,"mouseX":0.9577546296296297,"mouseY":0.90625,"noise":0.6708555158071439,"scale":0.7786845318092911,"top":2,"twirl":0.005405418018509103,"twist":5.116850969437312,"velocity":1,"shape":"line"}},{"slug":"crush-errors-with-sandbox-testing","authorBio":"","title":"Crush errors with Sandbox testing","summary":"With Sandboxes, you can reproduce and troubleshoot errors in your integration without impacting live transactions.","authors":["David Edoh-Bedi"],"date":"2024-12-19","type":"Blog","topics":["Sandboxes"],"artConfig":{"ampX":1.6155547739194231,"ampY":0.16105222953795506,"aspectRatio":4.846182045765707,"axis":"xy","lump":0.012257571935580414,"count":20,"freq":3.0367582350683,"isDial":false,"isLineart":false,"isRing":false,"isSpiral":false,"left":0,"mouseX":0.5011574074074074,"mouseY":0.482962962962963,"noise":0,"scale":3.7,"top":0,"twirl":0.1,"twist":10.44243260386455,"velocity":1,"shape":"rect"}},{"slug":"debugging-your-stripe-invoicing-integration-with-workbench","authorBio":"","title":"Debugging your Stripe Invoicing integration with Workbench","summary":"With Stripe Invoicing, you can create and manage invoices for one-time and recurring payments. Whether caused by infrastructure issues or coding bugs, integration failures do sometimes happen, which can prevent invoices from being paid in a timely manner.","authors":["David Edoh-Bedi"],"date":"2024-08-29","type":"Blog","topics":["Workbench","Invoicing"],"artConfig":{"ampX":1.8364052695935116,"ampY":0.7713401032732738,"aspectRatio":1.7238093835504644,"axis":"y","lump":0.9759304509066895,"count":91.4999999999999,"freq":5.2168324480928945,"isDial":false,"isLineart":false,"isRing":false,"isSpiral":false,"left":0,"mouseX":0.5023148148148148,"mouseY":0.06828528072837632,"noise":0,"scale":3.054,"top":100,"twirl":0.1,"twist":51.61800000000121,"velocity":1,"shape":"rect"}}]}],"estimatedReadingTime":"6 min read"},"__N_SSG":true}