{"pageProps":{"postData":{"slug":"debugging-your-aws-stripe-integration-just-got-easier","title":"Debugging your AWS/Stripe integration just got easier","summary":"For developers building on AWS, you have various choices for processing payments within your application. Most developers choose a payment processing service to handle this part of their application flow, which involves integrating with a third-party vendor outside of the AWS environment.","authors":["James Beswick"],"date":"2024-08-21","type":"Blog","topics":["Workbench","AWS"],"artConfig":{"ampX":0.7,"ampY":1,"aspectRatio":1,"axis":"y","lump":-0.696000000000001,"count":62.400000000000084,"freq":1.2,"isDial":false,"isLineart":false,"isRing":false,"isSpiral":false,"isBalls":false,"isMatrix":false,"left":-50,"kaleids":6,"mouseX":0.8206018518518519,"mouseY":0.2247983870967742,"noise":0,"scale":0.6049999999999953,"top":0,"twirl":0,"twist":-3.582,"velocity":1,"shape":"rect"},"content":"\nFor developers building on AWS, you have various choices for processing payments within your application. Most developers choose a payment processing service to handle this part of their application flow, which involves integrating with a third-party vendor outside of the AWS environment.\n\nThere are several key benefits to developers taking this approach. First, if your application processes credit cards, you can avoid the security risk of [handling or storing credit card information](https://stripe.com/guides/pci-compliance). Second, if you have a spiky workload, such as processing payments for Black Friday or large-scale events, you can offload to a service that can handle the variability of requests. Third, if you have global payments or multiple payment methods enabled, the payment provider can handle that complexity, and can make it much easier to add additional countries or payment methods in future, as your needs change.\n\n### The difficulty of finding logs for API calls in AWS\n\nWhen you use a third-party service such as [Stripe](https://docs.stripe.com/development), you either embed payment processing logic into the frontend of your web application or use backend APIs to submit payment information to the service’s API. The exact flow depends on if your application is customer-facing or operating as middleware for another workload. You also use the APIs for non-payment activities like creating products, configuring prices, and creating customers.\n\nAWS has a broad range of compute services where you can run your application, from [AWS Lambda](https://aws.amazon.com/lambda/) to [Amazon ECS](https://aws.amazon.com/ecs/), and [Amazon EKS](https://aws.amazon.com/eks/). Regardless, your application can make calls to [Stripe’s API](https://docs.stripe.com/api) directly from your code and it’s good practice to log the outcome and other attributes for these calls. However, depending on your compute choice and code configuration, your log files may contain sparse or verbose information about the API calls, and are stored in different places.\n\nFor example, Lambda stores logs in [Amazon CloudWatch](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch_architecture.html) which by default create a new log file for each Lambda invocation. This means if you have 10,000 calls in your application to Stripe’s API, you need to search up to 10,000 log files to find specific information. You must then filter for type of call, HTTP response code, and other attributes to identify a specific log. Additionally, by default the logs will not provide an aggregated view of your API calls over time.\n\nFor cost optimization in logging, it’s also common practice to use verbose mode during the development phase and restrict logs to essential information in production. This can unintentionally result in limiting the information available to debug production issues. Furthermore, the logging usually only captures the payload and associated metadata of the call, and any response received from the endpoint, but lacks any additional information available from the provider.\n\n### Getting started with Workbench\n\nStripe’s Workbench provides a more convenient way for developers to access and search logs at scale. It doesn’t require you to set a logging level, storing all available information by default while still obfuscating credit card numbers and other sensitive data. \n\nTo see Workbench:\n\n1. Navigate to [https://dashboard.stripe.com/](https://dashboard.stripe.com/) in your preferred browser and log into your Stripe account.   \n2. If you have multiple accounts configured, use the drop-down in the top-left to select the store API activity you wish to view. Workbench reports and content are scoped to the store level.  \n3. In the bottom-right corner of the browser, hover over the terminal icon to expand the menu, then select the caret symbol **^** to open Workbench.\n\n![](/images/workbench-common/caret-dark3.png)\n\n4. Workbench opens in the lower portion of the window:\n\n![](/images/workbench-common/workbench-screen.png)\n\n*Workbench is not a browser extension and does not rely on CLIs or other tools in your development machine, so you can use it immediately without the need for installing additional software.*\n\nDifferent tabs of Workbench are useful at different stages of development, or during production usage. On the **Overview** tab, you can immediately see the total number of successful and failed API requests by time. This can be useful for finding the time of failures, or for determining if your total number of API calls is likely to reach [rate limits](https://docs.stripe.com/rate-limits).\n\nIn the left pane, the **API versions** panel allows you to track which API versions your application uses. While Stripe supports API versions for up to six years, here you can identify calls using older versions:\n\n![](/images/easier-debugging-aws/easier-debugging-aws3.png)\n\nBy clicking the bar graph, this opens the **Logs** tab for the associated version, making it easier to find applications and microservices that can be updated.\n\n\nThe **Logs** tab allows you to drill into any individual API call to view the *Response* and *Request* body. This is equivalent to what you might store in a verbose log within AWS, but you are not charged by Stripe to store this data. Additionally, the UI contains quick links to copy the JSON, link to underlying records, and envelope metadata (such as API key and API version) that otherwise might not be captured by the caller.\n\n![](/images/easier-debugging-aws/easier-debugging-aws5.png)\n\nEven when Workbench is collapsed, its toolbar contains notifications that can help highlight important information. Click the icons with the red dots to learn more about any specific issues:\n\n![](/images/easier-debugging-aws/easier-debugging-aws6.png)\n\nIf your application has a recurring issue in an API call, the **Errors** tab makes it easier to view the different types of errors. Instead of parsing log files, use the list view on the left to find the most recent errors generated by an application, and then drill down. \n\n![](/images/easier-debugging-aws/easier-debugging-aws9.png)\n\nThis links to your individual logs. When you expand a single log entry on the left, the verbose version contains links to helpful documentation. Depending on the error, it may also provide error insights that expand on the exact type of problem that’s occurring.\n\n![](/images/easier-debugging-aws/easier-debugging-aws10.png)\n\n### Debugging events delivery failures\n\nStripe’s [Event Destinations](https://docs.stripe.com/event-destinations) feature makes it easier for you to handle asynchronous processes by delivering changes in state via a JSON event payload. In your AWS account, you receive these events via a [partner event bus](https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-saas.html) in your application’s region. However, when an event is either not delivered or has a failure, this may not be logged by the event bus, depending on if a CloudWatch Logs group has been configured as a target in the event rule.\n\nWorkbench provides the **Events** and **Event Destinations** tab to simplify the process of debugging event issues. In the events tab, you can see a list of recent events generated in your Stripe account. You can drill down into a single event to find successful and failed deliveries to webhook endpoints and connected platforms. This view aggregates all events including those sent to AWS and other platforms.\n\n\nThe **Event destinations** tab provides more information about retries on pending and failed events that Stripe sends to your AWS account. This view shows a graph of event delivery activity, and allows you to drill down into delivery attempts and responses from the endpoint. You can filter by event ID or by delivery status to help locate problematic events more quickly.\n\n![](/images/easier-debugging-aws/easier-debugging-aws12.png)\n\n### Conclusion\n\nUsing Stripe to process your payments can remove significant complexity from your code base, and help offload scalability and security concerns away from your AWS account. AWS has a broad range of compute options that can result in your application log files being distributed between server logs, CloudWatch Logs, and other places, making them challenging to locate and search.\n\nWorkbench is designed to help centralize the information developers need for understanding their Stripe integrations without the need for a third-party logging processor. You can quickly navigate large amounts of log data using advanced filters and find common types of errors occurring using aggregation. These logs are stored and made available at no extra cost to you and can provide more insights than are typically provided by verbose logging.\n\nIf there are more features you would like to see, let us know by clicking the **Send feedback** button at the top of the Workbench panel.","authorBio":"","additionalResources":[{"title":"Subscribe to Stripe Developers on YouTube.","url":"https://www.youtube.com/stripedevelopers\""},{"title":"Follow us at @Stripedev on twitter for updates and answers to your developer questions.","url":"https://twitter.com/stripedev"},{"title":"Sign up for the Developer Digest.","url":"https://go.stripe.global/dev-digest"},{"title":"Join the Stripe Discord server to chat live with other developers.","url":"https://discord.com/invite/RuJnSBXrQn"},{"title":"Join Stripe Insiders to try the latest features and provide direct feedback to the teams that build them.","url":"https://insiders.stripe.dev"}],"relatedArticles":[{"slug":"resolving-production-issues-in-your-aws-stripe-integration-using-workbench","title":"Resolving production issues in your AWS/Stripe integration using Workbench","summary":"This blog shows how to find when something is wrong in production, avoid jumping between tabs/docs to find information, and resolving issues quickly in the troubleshooting process, using an AWS integration as a starting point.","authors":["James Beswick"],"date":"2024-08-21","type":"Blog","topics":["Workbench","AWS"],"artConfig":{"ampX":1.6155547739194231,"ampY":0.16105222953795506,"aspectRatio":4.846182045765707,"axis":"xy","lump":0.012257571935580414,"count":20,"freq":3.0367582350683,"isDial":false,"isLineart":false,"isRing":false,"isSpiral":false,"left":0,"mouseX":0.5011574074074074,"mouseY":0.482962962962963,"noise":0,"scale":3.7,"top":0,"twirl":0.1,"twist":10.44243260386455,"velocity":1,"shape":"rect"}},{"slug":"advanced-error-handling-patterns-for-Stripe-enterprise-developers","title":"Advanced error handling patterns for Stripe enterprise developers","summary":"This post demonstrates some more advanced patterns to help you build resilient and robust payment systems to integrate Stripe with your enterprise applications. As your integration grows in complexity and volume, these patterns become crucial for maintaining system stability and providing a smooth user experience.","authors":["Ben Smith"],"date":"2024-09-03","type":"Blog","topics":["Workbench","Error Handling"],"artConfig":{"ampX":0.24321052757950756,"ampY":0.21234603378855432,"aspectRatio":1.891098642361734,"axis":"x","lump":-0.2663789659738541,"count":130,"freq":3.0281107682703468,"isDial":false,"isLineart":false,"isRing":false,"isSpiral":false,"isBalls":false,"isMatrix":false,"left":50,"kaleids":6.605468751812275,"mouseX":0.9577546296296297,"mouseY":0.90625,"noise":0.6708555158071439,"scale":0.7786845318092911,"top":2,"twirl":0.005405418018509103,"twist":5.116850969437312,"velocity":1,"shape":"line"}}]},"authors":[{"name":"James Beswick","slug":"james-beswick","profile":"James leads the Stripe Developer Relations team, helping our developer customers build solutions and learn about the benefits that Stripe offers for their workloads. He was previously a Developer Advocacy leader at AWS and loves helping startups and enterprise teams use technology to wow their customers and grow their businesses.","posts":[{"slug":"securing-stripe-api-keys-aws-automatic-rotation","authorBio":"","title":"Securing Stripe API Keys in AWS with Automatic Rotation","summary":"Learn how to securely manage and automatically rotate your Stripe API keys in AWS for a production-grade approach. This guide covers best practices, tools, and strategies to enhance the security of your financial transactions.","authors":["James Beswick"],"date":"2025-02-21","type":"Blog","topics":["AWS"],"artConfig":{"ampX":0.7,"ampY":1,"aspectRatio":1,"axis":"y","lump":-0.696000000000001,"count":62.400000000000084,"freq":1.2,"isDial":false,"isLineart":false,"isRing":false,"isSpiral":false,"isBalls":false,"isMatrix":false,"left":-50,"kaleids":6,"mouseX":0.8206018518518519,"mouseY":0.2247983870967742,"noise":0,"scale":0.6049999999999953,"top":0,"twirl":0,"twist":-3.582,"velocity":1,"shape":"rect"}},{"slug":"building-solid-stripe-integrations-developers-guide-success","authorBio":"James leads the Stripe Developer Relations team, helping our developer customers build solutions and learn about the benefits that Stripe offers for their workloads. He was previously a Developer Advocacy leader at AWS and loves helping startups and enterprise teams use technology to wow their customers and grow their businesses.","title":"Building Rock-Solid Stripe Integrations: A Developer's Guide to Success","summary":"Learn about Stripe integrations with essential tips for robust, secure payment systems and seamless user experiences. This guide prepares developers for real-world scenarios, from subscription management to dispute resolution, ensuring secure and seamless payments.","authors":["James Beswick"],"date":"2025-02-06","type":"Blog","topics":["Getting Started"],"artConfig":{"ampX":0.7,"ampY":1,"aspectRatio":1,"axis":"y","lump":-0.696000000000001,"count":62.400000000000084,"freq":1.2,"isDial":false,"isLineart":false,"isRing":false,"isSpiral":false,"isBalls":false,"isMatrix":false,"left":-50,"kaleids":6,"mouseX":0.8206018518518519,"mouseY":0.2247983870967742,"noise":0,"scale":0.6049999999999953,"top":0,"twirl":0,"twist":-3.582,"velocity":1,"shape":"rect"}},{"slug":"building-resilient-webhook-handlers-aws-dlqs-stripe-events","authorBio":"","title":"Building Resilient Webhook Handlers in AWS: Implementing DLQs for Stripe Events","summary":"Discover how to build reliable webhook handlers for Stripe events using AWS in this comprehensive guide. Learn about the challenges of processing webhook events at scale and how to address them with an enterprise-grade architecture.","authors":["James Beswick"],"date":"2025-01-30","type":"Blog","topics":["AWS"],"artConfig":{"ampX":0.7,"ampY":1,"aspectRatio":1,"axis":"y","lump":-0.696000000000001,"count":62.400000000000084,"freq":1.2,"isDial":false,"isLineart":false,"isRing":false,"isSpiral":false,"isBalls":false,"isMatrix":false,"left":-50,"kaleids":6,"mouseX":0.8206018518518519,"mouseY":0.2247983870967742,"noise":0,"scale":0.6049999999999953,"top":0,"twirl":0,"twist":-3.582,"velocity":1,"shape":"rect"}},{"slug":"new-to-stripe-learn-key-concepts-software-developers","authorBio":"","title":"New to Stripe? Learn the key concepts for software developers.","summary":"Discover the key concepts and terms for integrating Stripe in your applications. This guide covers Payment Intents Customer management, Subscription billing, Webhooks, Disputes, Refunds, and the benefits of expanded responses, providing developers with the tools they need to streamline payment processing efficiently.","authors":["James Beswick"],"date":"2025-01-29","type":"Blog","topics":["Getting Started"],"artConfig":{"ampX":1.6155547739194231,"ampY":0.16105222953795506,"aspectRatio":4.846182045765707,"axis":"xy","lump":0.012257571935580414,"count":20,"freq":3.0367582350683,"isDial":false,"isLineart":false,"isRing":false,"isSpiral":false,"left":0,"mouseX":0.5011574074074074,"mouseY":0.482962962962963,"noise":0,"scale":3.7,"top":0,"twirl":0.1,"twist":10.44243260386455,"velocity":1,"shape":"rect"}},{"slug":"managing-multiple-stripe-test-environments-from-aws","authorBio":"","title":"Managing multiple Stripe test environments from your AWS-hosted application","summary":"Stripe sandboxes enhance test environment management, offering improved functionality over test mode, allowing isolated accounts, multiple developers, and better access control while integrating seamlessly with AWS applications.","authors":["James Beswick"],"date":"2024-11-26","type":"Blog","topics":["Sandboxes","AWS"],"artConfig":{"ampX":0.7,"ampY":1,"aspectRatio":1,"axis":"y","lump":-0.696000000000001,"count":62.400000000000084,"freq":1.2,"isDial":false,"isLineart":false,"isRing":false,"isSpiral":false,"isBalls":false,"isMatrix":false,"left":-50,"kaleids":6,"mouseX":0.8206018518518519,"mouseY":0.2247983870967742,"noise":0,"scale":0.6049999999999953,"top":0,"twirl":0,"twist":-3.582,"velocity":1,"shape":"rect"}},{"slug":"using-demo-data-for-testing-stripe-integrations-in-aws","authorBio":"","title":"Using demo data for testing Stripe integrations in AWS-hosted applications","summary":"This post discusses integrating the Stripe agent toolkit with large language models (LLMs) to enhance automation workflows, enabling financial services access, metered billing, and streamlined operations across agent frameworks.","authors":["James Beswick"],"date":"2024-11-22","type":"Blog","topics":["Sandboxes"],"artConfig":{"ampX":1.6155547739194231,"ampY":0.16105222953795506,"aspectRatio":4.846182045765707,"axis":"xy","lump":0.012257571935580414,"count":20,"freq":3.0367582350683,"isDial":false,"isLineart":false,"isRing":false,"isSpiral":false,"left":0,"mouseX":0.5011574074074074,"mouseY":0.482962962962963,"noise":0,"scale":3.7,"top":0,"twirl":0.1,"twist":10.44243260386455,"velocity":1,"shape":"rect"}},{"slug":"resolving-production-issues-in-your-aws-stripe-integration-using-workbench","authorBio":"","title":"Resolving production issues in your AWS/Stripe integration using Workbench","summary":"This blog shows how to find when something is wrong in production, avoid jumping between tabs/docs to find information, and resolving issues quickly in the troubleshooting process, using an AWS integration as a starting point.","authors":["James Beswick"],"date":"2024-08-21","type":"Blog","topics":["Workbench","AWS"],"artConfig":{"ampX":1.6155547739194231,"ampY":0.16105222953795506,"aspectRatio":4.846182045765707,"axis":"xy","lump":0.012257571935580414,"count":20,"freq":3.0367582350683,"isDial":false,"isLineart":false,"isRing":false,"isSpiral":false,"left":0,"mouseX":0.5011574074074074,"mouseY":0.482962962962963,"noise":0,"scale":3.7,"top":0,"twirl":0.1,"twist":10.44243260386455,"velocity":1,"shape":"rect"}}]}],"estimatedReadingTime":"5 min read"},"__N_SSG":true}