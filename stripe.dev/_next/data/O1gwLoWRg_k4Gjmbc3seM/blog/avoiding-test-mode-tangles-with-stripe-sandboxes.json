{"pageProps":{"postData":{"slug":"avoiding-test-mode-tangles-with-stripe-sandboxes","title":"Avoiding test mode tangles with Stripe Sandboxes","summary":"Discover how to create independent testing environments with Stripe Sandboxes, streamline your development through GitHub automation, and prioritize the security of your API keys to enhance your payment integration process.","authors":["Ben Smith"],"date":"2024-09-16","type":"Blog","topics":["Sandboxes"],"artConfig":{"ampX":1.1642105275795096,"ampY":0.21234603378855432,"aspectRatio":1.791098642361734,"axis":"y","lump":0.7446210340261474,"count":109.99999999999999,"freq":3.0281107682703468,"isDial":false,"isLineart":false,"isRing":false,"isSpiral":false,"isBalls":false,"isMatrix":false,"left":0,"kaleids":2.5900000000000083,"mouseX":0.6134259259259259,"mouseY":0.7247983870967742,"noise":0,"scale":1.1986845318092938,"top":2,"twirl":0.005405418018509103,"twist":4.438000000000008,"velocity":0.5109999999999996,"shape":"ellipse"},"content":"\nTesting your Stripe integration can be challenging, especially when balancing secure environments with the risks of exposing sensitive information. Stripe sandboxes offer a solution by allowing developers to set up multiple separate testing areas that mimic real-world situations without affecting live transactions. Connecting Stripe sandboxes to  [GitHub](https://github.com/) automates the testing process, making development smoother, and reducing the test tangles previously encountered by having only a single test mode for each Stripe account. \n\nThis blog post examines the importance of using these Sandboxes and outlines methods for managing sandbox API keys securely, ensuring that your payment integration works effectively and protects user data. All the code samples featured in this post are available in this [GitHub repository](https://github.com/benjasl-stripe/stripe-sandbox-test/).\n\n## A Simple Sandbox Integration Example\n\nStripe uses the API keys linked to a sandbox to authenticate API requests directed at the corresponding sandbox environment. If a request is made without a key, an invalid request error is returned; conversely, an authentication error is raised if the key is incorrect or outdated. \n\nIf you don't have a Stripe account yet, sign up and [register a Stripe account](https://dashboard.stripe.com/register), and [create your first Sandbox](https://docs.stripe.com/sandboxes/dashboard/manage#create-a-sandbox).The following steps show you how to find your Sandbox key,:\n\nThe following steps show you how to find a sandbox key:\n\n1. To view a complete list of all the Sandboxes in your account, visit [https://dashboard.stripe.com/sandboxes](https://dashboard.stripe.com/sandboxes) or choose the account drop down from the top left corner of the dashboard: \n\n2. Choose the sandbox you want to access programmatically, and then choose  the \n**Developer** button at top right corner, and **API keys**.\n\n3. From the API Keys dashboard you can reveal, revoke, and create API keys. Check the documentation to  learn how to [manage API keys](https://docs.stripe.com/keys). To see the API key for your Sandbox environment, choose **Reveal test key**:\n\nAPI keys include both a publishable and secret key. The publishable key can be viewed in public and cannot be compromised. The secret **API key** is used to authenticate requests on your server when interacting with the Sandbox. By default, you can use the secret key to perform any API request without restriction. To avoid accidentally making an API call to the wrong sandbox, account, or having your secret API key compromised, ensure that it is stored securely in your web or mobile app’s server-side code (such as in an environment variable or credential management system) to call Stripe APIs. Don’t expose this key on a website or embed it in a mobile application.\n\nThe following steps show how to save this key as an environment variable in a server side Node.js application using the [Express framework](https://expressjs.com/):\n\n### Step 1: Set Up the Environment\n\n\nInstall Dependencies: Ensure you have [Node.js and npm installed](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm). Then create a new project folder and run the following commands to initialize a new Node.js project and install the required dependencies:\n\n```bash\nmkdir stripe-sandbox-example\ncd stripe-sandbox-example\nnpm init -y\nnpm install express stripe dotenv\n```\n\n1. **Create an Environment Variable**: Create a .env file in the root of your project and add your Stripe Sandbox API key there:\n\n```text\nSTRIPE_API_KEY=sk_test_key\n```\n\n### **Step 2: Create the Express Application**\n\nCreate a file named app.js in your project folder, and add the following code:\n\n```javascript\n// app.js\nrequire('dotenv').config(); // Load environment variables from .env file\nconst express = require('express');\nconst Stripe = require('stripe');\nconst app = express();\nconst port = process.env.PORT || 3000;\n// Initialize Stripe with the Sandbox API key from the environment variable\nconst stripe = Stripe(process.env.STRIPE_API_KEY);\n// Middleware to parse JSON requests\napp.use(express.json());\n// Example route to create a payment intent\napp.post('/create-payment-intent', async (req, res) => {\n   const { amount, currency } = req.body;\n   try {\n       const paymentIntent = await stripe.paymentIntents.create({\n           amount: amount,\n           currency: currency,\n       });\n\tres.status(200).json({ \n       clientSecret: paymentIntent.client_secret\n      });\n   } catch (error) {\n    console.error('Error creating payment intent:', error);\n    res.status(500).json({ error: error.message });\n   }\n})\n\n\n// used later for testing connections\napp.get('/account', async (req, res) => {\n   try {\n       const account = await stripe.accounts.retrieve();\n       res.status(200).json(account);\n   } catch (error) {\n       console.error('Error retrieving account:', error);\n       res.status(500).json({ error: error.message });\n   }\n});\n\n// Start the server\napp.listen(port, () => {\n   console.log(`Server is running on http://localhost:${port}`);\n});\n```\n\n### Step 3: Run the Application\n\nStart your Express Server: Run the following command in your terminal to start the server:\n\n```bash\n> node app.js\n```\n\nAccess the \\`/create-payment-intent\\` endpoint by sending a POST request. Use a tool like [Postman](https://www.postman.com/) or [curl](https://en.wikipedia.org/wiki/CURL). The following example uses curl:\n\n```bash\ncurl -X POST http://localhost:3000/create-payment-intent \\\n-H \"Content-Type: application/json\" \\\n-d '{\"amount\": 1000, \"currency\": \"usd\"}'\n```\n\nIn your [Stripe dashboard](https://dashboard.stripe.com/), first ensure that you are in the correct sandbox, and then open [Stripe Workbench](https://docs.stripe.com/workbench) to see the results of the request:  \n\n![image1](/images/avoiding-test-mode-tangles-with-stripe-sandboxes/test-mode-tangles-1.png) \n\n## Integrating Sandbox deployments with Github\n\nIntegrating Stripe Sandboxes into your version control system’s deployment workflow is essential for managing testing environments efficiently and securely. For example, using GitHub’s capabilities alongside Stripe Sandboxes, you can simplify and secure your deployment processes, increase collaboration among team members, and maintain tight control over sensitive configurations. Here’s how to manage this integration.\n\n### Step 1: Ensure GitHub is ignoring sensitive files\n\nA well-configured [.gitignore](https://docs.github.com/en/get-started/getting-started-with-git/ignoring-files) configuration file is important to prevent accidentally uploading sensitive files like .env. The previous Node.js example sets the sandbox API key as an environment variable using a .env file. To ensure this file is never committed to GitHub, the following script is included in the .gitignore file. This is the first file to be committed to the repository:\n\n```text\n# dotenv environment variable files\n.env\n.env.development.local\n.env.test.local\n.env.production.local\n.env.local\n```\n\nThis `.gitignore` configuration varies according to the runtime and framework you are working with.\n\n### Step 2: Set Up GitHub Secrets\n\nWhen using [GitHub Actions](https://docs.github.com/en/actions) for CI/CD, manage sensitive data securely using GitHub Secrets:\n\n1. Go to your GitHub repository. Choose **Settings** from the toolbar. On the left sidebar, navigate to **Secrets and variables** and choose **Actions** then choose **New repository secret**.  \n2. Add your secrets one at a time:\n\n![image2](/images/avoiding-test-mode-tangles-with-stripe-sandboxes/test-mode-tangles-2.png) \n\n### Step 4: Reference Secrets in GitHub Actions\n\nGitHub Actions allows you to automate your workflows and CI/CD processes. Start by creating a workflow that incorporates your Sandbox environment for testing. In your GitHub Actions workflow file (usually located in `.github/workflows/ci.yml`), reference the secrets you added. \n\nThe following workflow automates the process of testing the application whenever changes are pushed to the main branch. It checks out the latest code, sets up the necessary environment, installs any required dependencies, and runs tests that interact with Stripe to verify that the code is executing in the correct sandbox. This helps ensure the integrity and functionality of the application in a continuous and efficient manner, while maintaining secure practices in handling sensitive credentials like API keys:\n\n\n```text\nname: CI/CD with Stripe Sandboxes\non:\n push:\n   branches:\n     - main\njobs:\n devSandbox:\n   runs-on: ubuntu-latest\n   steps:\n     - name: Checkout Code\n       uses: actions/checkout@v2\n\n     - name: Set up Node.js\n       uses: actions/setup-node@v2\n       with:\n         node-version: '18'\n\n     - name: Install Dependencies\n       run: npm install\n\n     - name: Run Tests Using Sandbox\n       env:\n         STRIPE_API_KEY: ${{ secrets.STRIPE_API_KEY }}\n       run: npm run test  # Ensure tests use correct Sandbox API\n```\n\n### **Step 4. Creating a test file**\n\nThe test script defined in `app.test.js` is designed to validate the integration of the application with Stripe's Sandbox environment. It uses the [supertest](https://www.npmjs.com/package/supertest) library to send HTTP requests to the Express application imported from `app.js`. \n\nTo set up tests for your Node.js application using [Jest](https://jestjs.io/) and supertest, follow these steps:\n\n\n1. Install Jest for running tests and supertest for making HTTP requests in your test suite by running the following command:\n```bash\nnpm install --save-dev jest supertest\n```\n\n2. Modify your package.json file to include a test script that runs jest. Add the following line in the \"scripts\" section:\n\n```javascript\n{\n  \"scripts\": {\n    \"test\": \"jest\"\n  }\n}\n```\n\n3. Create a test file named app.test.js in your project root or a designated tests folder. In this file, write the test suite using Jest and supertest. \n\nThe test suite begins by verifying that the environment variable `STRIPE_API_KEY` is set, ensuring that the application has the necessary credentials to interact with the Stripe API. \n\n```javascript\n// __tests__/app.test.js\nconst request = require('supertest'); // For making HTTP requests in tests\nconst app = require('../app'); // Adjust the path as necessary\nrequire('dotenv').config(); // Load environment variables\n\ndescribe('Stripe Sandbox Integration', () => {\n    beforeAll(() => {\n        // Ensure the environment variables are set\n        expect(process.env.STRIPE_API_KEY).toBeDefined();\n    });\n\n     // New test: Verify GET request to Stripe account\n test('GET /account should return the correct sandbox name', async () => {\n        const response = await request(app).get('/account');\n        expect(response.status).toBe(200);\n        expect(response.body).toHaveProperty('id'); // Check for the existence of an account ID\n        expect(response.body.business_profile).toHaveProperty('name', 'Sandbox'); // Confirm business profile name\n        expect(response.body.settings.dashboard).toHaveProperty('display_name', 'dev-sandbox'); // Check for display_name\n        // Output the name of the sandbox\n        console.log('Sandbox Name:', response.body.settings.dashboard.display_name);\n    });\n});\n```\n\nThe script then verifies the connection to the Stripe API by making a GET request to the `/account` endpoint of the Node.js Express application. This route is designed to fetch the account details from Stripe. Upon receiving the response, the test asserts that the status is 200, indicating a successful request, and checks that the response body contains the correct ‘dashboard.display_name property’ of ‘dev-sandbox’, confirming that the connection to the Stripe sandbox is correctly established and functioning as expected. This approach not only validates the API integration but also ensures that sensitive configurations are correctly set.\n\nNow each time a new commit is made to the main branch, this workflow runs and verifies the application is configured for the correct sandbox environment. \n\nThis is the successful result of a recent commit:\n\n![image3](/images/avoiding-test-mode-tangles-with-stripe-sandboxes/test-mode-tangles-3.png) \n\nHere are the corresponding logs in the associated Stripe sandbox:\n\n![image4](/images/avoiding-test-mode-tangles-with-stripe-sandboxes/test-mode-tangles-4.png) \n\n## **Conclusion**\n\nUsing Stripe Sandboxes helps to reduce the test tangles previously encountered by having only a single test mode for each Stripe account. Setting up individual sandboxes for testing allows for focused validation of features, minimizing the risk of affecting live operations. Connecting these environments with GitHub automates the testing process and leads to quicker updates. \n\nSecuring your sandbox API keys is equally important. Utilize environment variables or managed key services whenever possible to safeguard sensitive information. This approach not only improves the reliability of your integration but also builds confidence in your payment solutions. Learning how to work with Stripe Sandboxes helps you deliver dependable payment solutions that are easier to and free from interference by others.\n\nExplore the sample [GitHub repository](https://github.com/benjasl-stripe/stripe-sandbox-test/) to access all the code samples featured in this post and enhance your Stripe integration experience.\n\nTo learn more about developing applications with Stripe, [visit our YouTube Channel](https://www.youtube.com/stripedevelopers).","authorBio":"","additionalResources":[{"title":"Try the code example in GitHub","url":"https://github.com/benjasl-stripe/stripe-sandbox-test"},{"title":"Subscribe to Stripe Developers on YouTube.","url":"https://www.youtube.com/stripedevelopers\""},{"title":"Follow us at @Stripedev on twitter for updates and answers to your developer questions.","url":"https://twitter.com/stripedev"},{"title":"Sign up for the Developer Digest.","url":"https://go.stripe.global/dev-digest"},{"title":"Join the Stripe Discord server to chat live with other developers.","url":"https://discord.com/invite/RuJnSBXrQn"},{"title":"Join Stripe Insiders to try the latest features and provide direct feedback to the teams that build them.","url":"https://insiders.stripe.dev"}],"relatedArticles":[{"slug":"observing-immediate-versus-delayed-payments-with-stripe-workbench","title":"Observing immediate versus delayed payments with Stripe Workbench","summary":"Immediate and delayed payments need to be handled differently within an integration. It’s important to understand what events to listen for and properties to inspect for relevant changes.","authors":["Cecil Phillip"],"date":"2024-08-23","type":"Blog","topics":["Workbench","Payment Methods"],"artConfig":{"ampX":0.5330209860971548,"ampY":0.3805387571353413,"aspectRatio":0.41516675978899176,"axis":"x","lump":0,"count":34.20000000000001,"freq":2.19048980999072,"isDial":false,"isLineart":false,"isRing":false,"isSpiral":false,"left":0,"mouseX":0.7386574074074074,"mouseY":0.52,"noise":0,"scale":1.2797443644167636,"top":30,"twirl":0.2139585743169172,"twist":5.989515467478382,"velocity":1,"shape":"rect"}},{"slug":"simple-error-handling-strategies-with-stripe-workbench","title":"Simple error handling strategies with Stripe Workbench","summary":"With Workbench, developers now have a bird’s-eye view of their integration which shows many potential issues in one place. This makes it easier to see the impact of each incident, see how often it’s happening, and receive actionable advice for resolving the issue.","authors":["Ben Smith"],"date":"2024-09-02","type":"Blog","topics":["Workbench","Error Handling"],"artConfig":{"ampX":0.24321052757950756,"ampY":0.21234603378855432,"aspectRatio":2.4639999999999973,"axis":"x","lump":1.7489999999999981,"count":116.19999999999999,"freq":0.8651107682703485,"isDial":false,"isLineart":false,"isRing":false,"isSpiral":false,"isBalls":false,"isMatrix":false,"left":0,"kaleids":8,"mouseX":0.9,"mouseY":0.8729838709677419,"noise":0,"scale":0.2736845318092905,"top":-58,"twirl":0.2,"twist":8.16200000000005,"velocity":2,"shape":"ellipse"}}]},"authors":[{"name":"Ben Smith","slug":"ben-smith","profile":"Ben is a Staff Developer Advocate at Stripe, based in the UK. Previously, he was a Principal Developer Advocate at AWS, specializing in serverless architecture. With a background in web development, he is passionate about empowering developers through knowledge sharing and community engagement, making complex technologies accessible to all.","posts":[{"slug":"how-do-i-store-inventory-data-in-my-stripe-application","authorBio":"","title":"How do I store inventory data in my Stripe application","summary":"Explore the critical importance of managing real-time inventory updates for both online marketplaces and physical stores. This blog post details the development of an event-driven architecture designed to synchronize inventory levels with Stripe payment events using AWS cloud services. The demonstration centers around the DevRel Swag Store, showcasing a practical application used at the GOTO Chicago event, which integrates serverless technologies like Amazon DynamoDB, AWS Lambda, and IoT Core for efficient inventory management. Learn about the challenges of using Stripe metadata for inventory, and discover robust solutions for handling race conditions and implementing dynamic inventory checks. Additionally, understand the trade-offs between using Stripe Payment Links and custom payment processes for real-time stock validation.","authors":["Ben Smith"],"date":"2024-12-16","type":"Blog","topics":["Event Destinations","AWS"],"artConfig":{"ampX":0.24321052757950756,"ampY":0.21234603378855432,"aspectRatio":1.891098642361734,"axis":"x","lump":-0.2663789659738541,"count":130,"freq":3.0281107682703468,"isDial":false,"isLineart":false,"isRing":false,"isSpiral":false,"isBalls":false,"isMatrix":false,"left":50,"kaleids":6.605468751812275,"mouseX":0.9577546296296297,"mouseY":0.90625,"noise":0.6708555158071439,"scale":0.7786845318092911,"top":2,"twirl":0.005405418018509103,"twist":5.116850969437312,"velocity":1,"shape":"line"}},{"slug":"data-access-patterns-for-simple-stripe-Integrations","authorBio":"","title":"Data access patterns for simple Stripe Integrations","summary":"Is your Stripe integration ready to scale with your application? In this blog post, explore smart data strategies to enhance performance and security. Learn how to leverage Stripe/'s features, secure web backends, and serverless functions for efficient data management. Discover when to integrate a global CDN and use a separate database for deeper data control, ensuring a seamless user experience.","authors":["Ben Smith"],"date":"2024-11-27","type":"Blog","topics":["Event Destinations","AWS","Serverless"],"artConfig":{"ampX":0.24321052757950756,"ampY":0.21234603378855432,"aspectRatio":1.891098642361734,"axis":"x","lump":-0.2663789659738541,"count":130,"freq":3.0281107682703468,"isDial":false,"isLineart":false,"isRing":false,"isSpiral":false,"isBalls":false,"isMatrix":false,"left":50,"kaleids":6.605468751812275,"mouseX":0.9577546296296297,"mouseY":0.90625,"noise":0.6708555158071439,"scale":0.7786845318092911,"top":2,"twirl":0.005405418018509103,"twist":5.116850969437312,"velocity":1,"shape":"line"}},{"slug":"growing-your-stripe-integration-with-event-destinations","authorBio":"","title":"Growing Your Stripe Integration With Event Destinations","summary":"Event Destinations has begun rolling out to general availability as of 10/30 and will soon be enabled for all accounts. This post explores how to use Stripe Event Destinations and Amazon EventBridge to achieve near infinite customization possibilities for your payment solutions without disrupting your existing integrations.","authors":["Ben Smith"],"date":"2024-10-31","type":"Blog","topics":["Event Destinations","AWS"],"artConfig":{"ampX":0.24321052757950756,"ampY":0.21234603378855432,"aspectRatio":1.891098642361734,"axis":"x","lump":-0.2663789659738541,"count":130,"freq":3.0281107682703468,"isDial":false,"isLineart":false,"isRing":false,"isSpiral":false,"isBalls":false,"isMatrix":false,"left":50,"kaleids":6.605468751812275,"mouseX":0.9577546296296297,"mouseY":0.90625,"noise":0.6708555158071439,"scale":0.7786845318092911,"top":2,"twirl":0.005405418018509103,"twist":5.116850969437312,"velocity":1,"shape":"line"}},{"slug":"choosing-the-right-sandbox-strategy-for-your-organization","authorBio":"","title":"Choosing the right sandbox strategy for your organization","summary":"Stripe Sandboxes offer a powerful solution for isolating testing environments, but how you implement them can make all the difference. Pick a sandbox strategy that best suits your organizations development approach and team size.","authors":["Ben Smith"],"date":"2024-09-26","type":"Blog","topics":["Sandboxes"],"artConfig":{"ampX":1.367128437063478,"ampY":2.0936337963955425,"aspectRatio":1.5242133042669057,"axis":"xy","lump":0.9123757707981675,"count":88.60000000000001,"freq":3.785997393314164,"isDial":false,"isLineart":true,"isRing":true,"isSpiral":false,"left":-80,"mouseX":0.5121527777777778,"mouseY":0.4894613583138173,"noise":0,"scale":2.294388755555997,"top":150,"twirl":0.006193707110889813,"twist":1.3885165542029452,"velocity":1,"shape":"rect"}},{"slug":"upgrading-your-stripe-plugin-security","authorBio":"","title":"Upgrading your Stripe plugin security","summary":"Secure your Stripe integrations by ditching unrestricted secret keys—learn how to protect merchant accounts with restricted access API keys and OAuth 2.0, and avoid compliance fees.","authors":["Ben Smith"],"date":"2024-09-19","type":"Blog","topics":["Stripe Apps"],"artConfig":{"ampX":0.24321052757950756,"ampY":0.21234603378855432,"aspectRatio":1.891098642361734,"axis":"x","lump":-0.2663789659738541,"count":130,"freq":3.0281107682703468,"isDial":false,"isLineart":false,"isRing":false,"isSpiral":false,"isBalls":false,"isMatrix":false,"left":50,"kaleids":6.605468751812275,"mouseX":0.9577546296296297,"mouseY":0.90625,"noise":0.6708555158071439,"scale":0.7786845318092911,"top":2,"twirl":0.005405418018509103,"twist":5.116850969437312,"velocity":1,"shape":"line"}},{"slug":"advanced-error-handling-patterns-for-Stripe-enterprise-developers","authorBio":"","title":"Advanced error handling patterns for Stripe enterprise developers","summary":"This post demonstrates some more advanced patterns to help you build resilient and robust payment systems to integrate Stripe with your enterprise applications. As your integration grows in complexity and volume, these patterns become crucial for maintaining system stability and providing a smooth user experience.","authors":["Ben Smith"],"date":"2024-09-03","type":"Blog","topics":["Workbench","Error Handling"],"artConfig":{"ampX":0.24321052757950756,"ampY":0.21234603378855432,"aspectRatio":1.891098642361734,"axis":"x","lump":-0.2663789659738541,"count":130,"freq":3.0281107682703468,"isDial":false,"isLineart":false,"isRing":false,"isSpiral":false,"isBalls":false,"isMatrix":false,"left":50,"kaleids":6.605468751812275,"mouseX":0.9577546296296297,"mouseY":0.90625,"noise":0.6708555158071439,"scale":0.7786845318092911,"top":2,"twirl":0.005405418018509103,"twist":5.116850969437312,"velocity":1,"shape":"line"}},{"slug":"simple-error-handling-strategies-with-stripe-workbench","authorBio":"","title":"Simple error handling strategies with Stripe Workbench","summary":"With Workbench, developers now have a bird’s-eye view of their integration which shows many potential issues in one place. This makes it easier to see the impact of each incident, see how often it’s happening, and receive actionable advice for resolving the issue.","authors":["Ben Smith"],"date":"2024-09-02","type":"Blog","topics":["Workbench","Error Handling"],"artConfig":{"ampX":0.24321052757950756,"ampY":0.21234603378855432,"aspectRatio":2.4639999999999973,"axis":"x","lump":1.7489999999999981,"count":116.19999999999999,"freq":0.8651107682703485,"isDial":false,"isLineart":false,"isRing":false,"isSpiral":false,"isBalls":false,"isMatrix":false,"left":0,"kaleids":8,"mouseX":0.9,"mouseY":0.8729838709677419,"noise":0,"scale":0.2736845318092905,"top":-58,"twirl":0.2,"twist":8.16200000000005,"velocity":2,"shape":"ellipse"}},{"slug":"bringing-your-stripe-objects-to-life-with-workbench","authorBio":"","title":"Bringing your Stripe objects to life with Workbench","summary":"This post shows how to use the Stripe Workbench Inspector to examine the lifecycle of a PaymentIntent object.","authors":["Ben Smith"],"date":"2024-08-29","type":"Blog","topics":["Workbench","Payment Intents"],"artConfig":{"ampX":1.720000000000003,"ampY":1,"aspectRatio":1,"axis":"x","lump":0,"count":25,"freq":1,"isDial":false,"isLineart":false,"isRing":false,"isSpiral":false,"isBalls":true,"isMatrix":true,"left":-120,"mouseX":0.5422453703703703,"mouseY":0.5581668625146886,"noise":3.2309999999999084,"scale":1.323999999999992,"top":-50,"twirl":0.06299999999999983,"twist":15.419999999999984,"velocity":1,"shape":"ellipse"}}]}],"estimatedReadingTime":"6 min read"},"__N_SSG":true}