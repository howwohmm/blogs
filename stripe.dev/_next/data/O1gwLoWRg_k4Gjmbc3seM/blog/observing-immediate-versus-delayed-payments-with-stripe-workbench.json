{"pageProps":{"postData":{"slug":"observing-immediate-versus-delayed-payments-with-stripe-workbench","title":"Observing immediate versus delayed payments with Stripe Workbench","summary":"Immediate and delayed payments need to be handled differently within an integration. It’s important to understand what events to listen for and properties to inspect for relevant changes.","authors":["Cecil Phillip"],"date":"2024-08-23","type":"Blog","topics":["Workbench","Payment Methods"],"artConfig":{"ampX":0.5330209860971548,"ampY":0.3805387571353413,"aspectRatio":0.41516675978899176,"axis":"x","lump":0,"count":34.20000000000001,"freq":2.19048980999072,"isDial":false,"isLineart":false,"isRing":false,"isSpiral":false,"left":0,"mouseX":0.7386574074074074,"mouseY":0.52,"noise":0,"scale":1.2797443644167636,"top":30,"twirl":0.2139585743169172,"twist":5.989515467478382,"velocity":1,"shape":"rect"},"content":"\nStripe supports a diverse range of payment methods that you can choose from to collect funds from your customers. Each method has a set of unique attributes tailored to different business types and customer locations. When choosing the payment methods you want to enable for your application, it is important to understand how their characteristics will affect customers as well as how the business implements them. \n\nThis post explores how different payment methods behave with regards to payment confirmation. Stripe categorizes payment confirmation as either immediate or delayed, representing the speed at which payment methods return a status after an attempted payment. Credit cards, for example, return a payment status immediately while other payment methods like bank debits require some more time to process.\n\nIn the [Stripe Dashboard](https://dashboard.stripe.com/), you can quickly toggle on or off the payment methods as needed. However, if your application isn't equipped to handle the varying behaviors of different payment methods, it could lead to issues for your business.\n\n### Immediate Confirmation\n\nCredit cards are one of the more commonly used payment methods that offer immediate notification when a transaction is attempted. They are usually enabled by default in a Stripe account. You can verify this by navigating to the **Payment Methods** section of the **Payment** settings in the Dashboard. Stripe payment options like Checkout, Payment Links and the Payment Element inspect the configured payment methods to know what options to display to the user. These options use a [**dynamic payment methods**](https://docs.stripe.com/payments/payment-methods/dynamic-payment-methods) strategy which takes into account factors such as the customer’s location, device type, and local currency.\n\nTo learn how credit card payments behave in Stripe, you can use [Workbench](https://docs.stripe.com/workbench) along with the [Stripe CLI](https://docs.stripe.com/stripe-cli/overview) in the browser to observe all the generated activity. If you are unfamiliar with Workbench, it is an in-browser tool for debugging and monitoring Stripe payment integrations. It is integrated into the Dashboard experience so there is no need to install or pay anything to use it.\n\nIf Workbench isn’t available in your Stripe account, navigate to the following link to enable it: [https://dashboard.stripe.com/workbench](https://dashboard.stripe.com/workbench). \n\nAssuming that the Stripe account you are logged into has prices and products already setup, create a Checkout session using one of the products using the Stripe CLI. Also, make sure the account is in test mode so that any changes made do not affect the production environment. To do this, open Workbench by selecting it from the Developers menu in the upper right side of the Dashboard screen.\n\n![](/images/observing-delayed/observing-delayed1.png)\n\nWithin Workbench, select the **Shell** tab. This activates a terminal session in your browser where you can issue commands against your Stripe account using the Stripe CLI. \n\n![](/images/observing-delayed/observing-delayed2.png)\n\nTo create a Checkout session, enter the following command into the terminal, remembering to replace the price ID in the line items property with one of your own. \n\n```py\nstripe checkout sessions create --success-url=\"https://example.com/success\" --mode=payment -d \"line_items[0][price]\"=your-own-price-id -d \"line_items[0][quantity]\"=1  \n```\n\nClick on the link provided in the url property of the response to open up the checkout sessions in your browser. Choose Card as the payment method, fill out the payment information using one of Stripe’s [test cards](https://docs.stripe.com/testing#cards), and submit the form.\n\nBack in the Workbench, click on the **Events** tab and you will see a number of events have been triggered from that Checkout session. The three important ones to pay attention to are c`harge.succeeded`, `payment_intent.succeeded`, and `checkout.session.completed`. These are the events your application must watch for to know whether a card payment was successful or not. Clicking on any one of these events allows you to review the respective event details.\n\n\n![](/images/observing-delayed/observing-delayed3.png)\n\nThe `checkout.session.completed` event has a `payment_status` property that can be set to either `paid`, `unpaid`, or `no_payment_required`. This is the property your payment integration code must inspect to confirm the checkout payment. This is often confused with the status property on the `checkout.session.completed` event, which can be set to `open`, `complete`, or `expired`. A completed checkout session does not mean that there was a successful payment. Instead, it is an indication that the customer successfully submitted the form on the checkout page.\n\nThe `charge.succeeded` and `payment_intent.succeeded` events also signal that there was a successful payment but they do not contain any information that relates back to the initial checkout session.\n\n### Delayed Confirmation\n\nOther payment methods like bank debits, bank transfers, and cash-based vouchers can take a few days to process before they return a payment confirmation. Because of this, your integration has to look out for additional events from Stripe when working with these types of payments.\n\nIn the **Payment Methods** section of the Dashboard, the various payment method options are shown for your account along with a brief summary of what they support.\n\n![](/images/observing-delayed/observing-delayed4.png)\n\nThe image above shows the supported bank debit options for an account. Notice that for ACH Direct Debit payment confirmation supports refunds, recurring payments, and can take up to five days to process. To see how delayed payment confirmations work with a checkout session, enable one of these payment methods and execute the same command from above in the in-browser shell.\n\n```py\nstripe checkout sessions create --success-url=\"https://example.com/success\" --mode=payment -d \"line_items[0][price]\"=your-own-price-id -d \"line_items[0][quantity]\"=1\n```\n\nAfter opening the generated checkout link in your browser, you should see the option to use the bank debit method that was just enabled. If the option doesn’t show, check that the payment method was successfully enabled and that it supports the currency of the price you provided.\n\n![](/images/observing-delayed/observing-delayed5.png)\n\nTo try out ACH Direct Debit without providing real banking information, complete the payment form using the Test Institution option on the form. After submitting the payment, return to the Dashboard, open the **Events** tab in Workbench.\n\nA different batch of events are triggered for this new checkout session. Inspecting the payload of the `checkout.session.completed` event reveals that payment status is unpaid even though the checkout session was successfully completed.\n\n![](/images/observing-delayed/observing-delayed7.png)\n\nThe associated payment intent and charge objects enter an intermediary state before successfully completing. A new event named `checkout.session.async_payment_succeeded` is also triggered. In test mode, this event shows up almost immediately but it can take a few days to be seen in production.\n\nWhen working with payment methods that have delayed notifications, this is one of the events your application must listen for to find out the status of the payment. A `checkout.session.async_payment_failed` event is sent instead if the payment failed. Inspecting the payload of `checkout.session.async_payment_succeeded` event in Workbench reveals that the payment status for this checkout session is now paid.\n\n![](/images/observing-delayed/observing-delayed8.png)\n\n### Conclusion\n\nIt is important to understand how different payment methods behave when building out a payments integration. Knowing what events and properties to look for can save you time and prevent the business from losing money. The tools available in Workbench provide deeper insights into how different payment methods behave in Stripe and how your application can properly integrate with them. Take a look at the Workbench documentation to delve deeper into its other capabilities.\n","authorBio":"","additionalResources":[{"title":"Stripe CLI","url":"https://docs.stripe.com/stripe-cli"},{"title":"A guide to types of payment methods","url":"https://stripe.com/guides/payment-methods-guide"},{"title":"Stripe Checkout Guide","url":"https://docs.stripe.com/payments/checkout"},{"title":"Workbench Guide","url":"https://docs.stripe.com/workbench"},{"title":"Subscribe to Stripe Developers on YouTube.","url":"https://www.youtube.com/stripedevelopers\""},{"title":"Follow us at @Stripedev on twitter for updates and answers to your developer questions.","url":"https://twitter.com/stripedev"},{"title":"Sign up for the Developer Digest.","url":"https://go.stripe.global/dev-digest"},{"title":"Join the Stripe Discord server to chat live with other developers.","url":"https://discord.com/invite/RuJnSBXrQn"},{"title":"Join Stripe Insiders to try the latest features and provide direct feedback to the teams that build them.","url":"https://insiders.stripe.dev"}],"relatedArticles":[{"slug":"doing-more-with-less-reducing-requests-to-the-stripe-api","title":"Doing more with less: Reducing requests to the Stripe API","summary":"The performance of an application can directly affect the customer experience. Using the expand feature along with caching techniques, developers can improve the performance of their application by reducing the number of API calls to Stripe.","authors":["Cecil Phillip"],"date":"2024-08-19","type":"Blog","topics":["Workbench"],"artConfig":{"ampX":1.8364052695935116,"ampY":0.7713401032732738,"aspectRatio":1.672809383550465,"axis":"x","lump":0.9759304509066895,"count":91.4999999999999,"freq":5.2168324480928945,"isDial":false,"isLineart":false,"isRing":false,"isSpiral":false,"left":0,"mouseX":0.31886574074074076,"mouseY":0.5007587253414264,"noise":0,"scale":1.293999999999998,"top":0,"twirl":0.1,"twist":51.86400000000122,"velocity":1,"shape":"ellipse"}},{"slug":"debugging-your-stripe-invoicing-integration-with-workbench","title":"Debugging your Stripe Invoicing integration with Workbench","summary":"With Stripe Invoicing, you can create and manage invoices for one-time and recurring payments. Whether caused by infrastructure issues or coding bugs, integration failures do sometimes happen, which can prevent invoices from being paid in a timely manner.","authors":["David Edoh-Bedi"],"date":"2024-08-29","type":"Blog","topics":["Workbench","Invoicing"],"artConfig":{"ampX":1.8364052695935116,"ampY":0.7713401032732738,"aspectRatio":1.7238093835504644,"axis":"y","lump":0.9759304509066895,"count":91.4999999999999,"freq":5.2168324480928945,"isDial":false,"isLineart":false,"isRing":false,"isSpiral":false,"left":0,"mouseX":0.5023148148148148,"mouseY":0.06828528072837632,"noise":0,"scale":3.054,"top":100,"twirl":0.1,"twist":51.61800000000121,"velocity":1,"shape":"rect"}}]},"authors":[{"name":"Cecil Phillip","slug":"cecil-phillip","profile":"Cecil Phillip is a part of the Developer Relations team at Stripe. He is originally from St. John’s, Antigua and has over a decade of experience in building software for various industries. He’s a huge fan of .NET and loves learning about patterns for building distributed systems. Feel free to reach out to him on social media, and check out some of his videos on the Stripe Developer channel.","posts":[{"slug":"prepare-for-api-upgrades","authorBio":"","title":"Preparing for Stripe API Upgrades","summary":"New Stripe API versions come with new, and sometimes breaking, changes which should be evaluated before upgrading. Stripe Sandboxes and Workbench provide tooling to create isolated workspaces to test applications against these new changes.","authors":["Cecil Phillip"],"date":"2024-10-24","type":"Blog","topics":["Workbench"],"artConfig":{"ampX":0.5330209860971548,"ampY":0.3805387571353413,"aspectRatio":0.41516675978899176,"axis":"x","lump":0,"count":34.20000000000001,"freq":2.19048980999072,"isDial":false,"isLineart":false,"isRing":false,"isSpiral":false,"left":0,"mouseX":0.7386574074074074,"mouseY":0.52,"noise":0,"scale":1.2797443644167636,"top":30,"twirl":0.2139585743169172,"twist":5.989515467478382,"velocity":1,"shape":"rect"}},{"slug":"creating-reusable-dev-environments-with-sandboxes","authorBio":"","title":"Creating reusable developer environments with Stripe Sandboxes","summary":"When onboarding new team members, getting their development environments setup can be very time consuming. Preprovisioned environments with Stripe sandboxes and development containers can speed up their time to productivity.","authors":["Cecil Phillip"],"date":"2024-10-20","type":"Blog","topics":["Sandboxes"],"artConfig":{"ampX":0.5330209860971548,"ampY":0.3805387571353413,"aspectRatio":0.41516675978899176,"axis":"x","lump":0,"count":34.20000000000001,"freq":2.19048980999072,"isDial":false,"isLineart":false,"isRing":false,"isSpiral":false,"left":0,"mouseX":0.7386574074074074,"mouseY":0.52,"noise":0,"scale":1.2797443644167636,"top":30,"twirl":0.2139585743169172,"twist":5.989515467478382,"velocity":1,"shape":"rect"}},{"slug":"testing-subscriptions-with-stripe-test-clocks-and-workbench","authorBio":"","title":"Testing  subscriptions with Stripe Test Clocks and Workbench","summary":"Validating payment logic that gets triggered over a period of time is challenging and sometimes results in inelegant solutions.The combination of test clocks and workbench will improve the ability for developers to build and debug recurring payments.","authors":["Cecil Phillip"],"date":"2024-10-14","type":"Blog","topics":["Workbench","Payment Methods"],"artConfig":{"ampX":0.5330209860971548,"ampY":0.3805387571353413,"aspectRatio":0.41516675978899176,"axis":"x","lump":0,"count":34.20000000000001,"freq":2.19048980999072,"isDial":false,"isLineart":false,"isRing":false,"isSpiral":false,"left":0,"mouseX":0.7386574074074074,"mouseY":0.52,"noise":0,"scale":1.2797443644167636,"top":30,"twirl":0.2139585743169172,"twist":5.989515467478382,"velocity":1,"shape":"rect"}},{"slug":"doing-more-with-less-reducing-requests-to-the-stripe-api","authorBio":"","title":"Doing more with less: Reducing requests to the Stripe API","summary":"The performance of an application can directly affect the customer experience. Using the expand feature along with caching techniques, developers can improve the performance of their application by reducing the number of API calls to Stripe.","authors":["Cecil Phillip"],"date":"2024-08-19","type":"Blog","topics":["Workbench"],"artConfig":{"ampX":1.8364052695935116,"ampY":0.7713401032732738,"aspectRatio":1.672809383550465,"axis":"x","lump":0.9759304509066895,"count":91.4999999999999,"freq":5.2168324480928945,"isDial":false,"isLineart":false,"isRing":false,"isSpiral":false,"left":0,"mouseX":0.31886574074074076,"mouseY":0.5007587253414264,"noise":0,"scale":1.293999999999998,"top":0,"twirl":0.1,"twist":51.86400000000122,"velocity":1,"shape":"ellipse"}}]}],"estimatedReadingTime":"4 min read"},"__N_SSG":true}